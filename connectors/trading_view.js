// connectors/trading_view.js
const http = require('http');
const url = require('url');
const {static} = require("express");


class TradingViewConnector {
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ FUTURES —Å–∏–≥–Ω–∞–ª—É
     * –§–æ—Ä–º–∞—Ç: ENTER-LONG_BINANCE_SOLUSDT_BOT-NAME-ENBIiG_5M_e5009c...
     */
    static parseSignalFutures(signalString) {
        const cleanSignal = signalString.trim();
        const parts = cleanSignal.split('_');

        if (parts.length < 5) {
            throw new Error(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª—É. –û—Ç—Ä–∏–º–∞–Ω–æ ${parts.length} —á–∞—Å—Ç–∏–Ω, –æ—á—ñ–∫—É—î—Ç—å—Å—è –º—ñ–Ω—ñ–º—É–º 5`);
        }

        let action = '';
        let type = '';
        let side;

        if (parts[0].includes('ENTER-LONG')) {
            action = 'ENTER';
            type = 'LONG';
        } else if (parts[0].includes('EXIT-LONG')) {
            action = 'EXIT';
            type = 'LONG';
        } else if (parts[0].includes('ENTER-SHORT')) {
            action = 'ENTER';
            type = 'SHORT';
        } else if (parts[0].includes('EXIT-SHORT')) {
            action = 'EXIT';
            type = 'SHORT';
        } else if (parts[0].includes('EXIT-ALL')) {
            action = 'EXIT';
            type = 'ALL';
        } else {
            throw new Error(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥—ñ—ó: ${parts[0]}`);
        }


        if (action === 'ENTER' && type === 'LONG') {
            side = 'buy';  // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Long –ø–æ–∑–∏—Ü—ñ—é = –∫—É–ø—É—î–º–æ
            } else if (action === 'ENTER' && type === 'SHORT') {
            side = 'sell'; // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Short –ø–æ–∑–∏—Ü—ñ—é = –ø—Ä–æ–¥–∞—î–º–æ
        } else if (action === 'EXIT' && type === 'LONG') {
            side = 'sell'; // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Long –ø–æ–∑–∏—Ü—ñ—é = –ø—Ä–æ–¥–∞—î–º–æ
        } else if (action === 'EXIT' && type === 'SHORT') {
            side = 'buy';  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Short –ø–æ–∑–∏—Ü—ñ—é = –∫—É–ø—É—î–º–æ
        }


        return {
            action: action,              // ENTER/EXIT
            positionType: type,          // LONG/SHORT/ALL
            side: side,   // sell
            exchange: parts[1],          // BINANCE
            coinCode: parts[2].replace('-','_'),          // SOL_USDT
            botName: parts[3],           // BOT-NAME-ENBIiG
            timeframe: parts[4],         // 5M
            hash: parts[5] || '',        // e5009c... (—è–∫—â–æ —î)
            originalSignal: cleanSignal
        };
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ SPOT —Å–∏–≥–Ω–∞–ª—É
     * –§–æ—Ä–º–∞—Ç: BUY_BINANCE_BTCUSDT_BOT-NAME-ENBIiG_1M_e5009c...
     */
    static parseSignalSpot(signalString) {
        // signalString = "BUY_BINANCE_DBTC-DUSDT_BOT-NAME-ENBIiG_1M_e5009c035e87043ed06ccde0";

        const cleanSignal = signalString.trim();
        const parts = cleanSignal.split('_');

        if (parts.length < 5) {
            throw new Error(`–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª—É. –û—Ç—Ä–∏–º–∞–Ω–æ ${parts.length} —á–∞—Å—Ç–∏–Ω, –æ—á—ñ–∫—É—î—Ç—å—Å—è –º—ñ–Ω—ñ–º—É–º 5`);
        }

        return {
            action: parts[0].toLowerCase(),              // sell/buy
            exchange: parts[1],                          // BINANCE
            coinCode: parts[2].replace('-','_'),        // BTCUSDT
            botName: parts[3],                           // BOT-NAME-ENBIiG
            timeframe: parts[4],                         // 1M
            hash: parts[5] || '',                        // —Ö–µ—à (—è–∫—â–æ —î)
            originalSignal: cleanSignal
        };
    }

    /**
     * –í–∏–≤—ñ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π FUTURES —Å–∏–≥–Ω–∞–ª –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    static debugSignal(parsedSignal) {
        console.log('\nüìä ============================================');
        console.log('üìä FUTURES SIGNAL RECEIVED');
        console.log('üìä ============================================');
        console.log('   Action:     ', parsedSignal.action);
        console.log('   Direction:  ', parsedSignal.positionType);
        console.log('   Exchange:   ', parsedSignal.exchange);
        console.log('   Symbol:     ', parsedSignal.coinCode);
        console.log('   Bot Name:   ', parsedSignal.botName);
        console.log('   Timeframe:  ', parsedSignal.timeframe);
        if (parsedSignal.hash) {
            console.log('   Hash:       ', parsedSignal.hash);
        }
        console.log('üìä ============================================');

        // –õ–æ–≥—ñ–∫–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É
        if (parsedSignal.action === 'ENTER') {
            if (parsedSignal.positionType === 'LONG') {
                console.log('   ‚úÖ –í–Ü–î–ö–†–ò–í–ê–Ñ–ú–û –õ–û–ù–ì –ü–û–ó–ò–¶–Ü–Æ');
            } else if (parsedSignal.positionType === 'SHORT') {
                console.log('   ‚úÖ –í–Ü–î–ö–†–ò–í–ê–Ñ–ú–û –®–û–†–¢ –ü–û–ó–ò–¶–Ü–Æ');
            }
        } else if (parsedSignal.action === 'EXIT') {
            if (parsedSignal.positionType === 'LONG') {
                console.log('   ‚ùå –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –õ–û–ù–ì –ü–û–ó–ò–¶–Ü–Æ');
            } else if (parsedSignal.positionType === 'SHORT') {
                console.log('   ‚ùå –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –®–û–†–¢ –ü–û–ó–ò–¶–Ü–Æ');
            } else if (parsedSignal.positionType === 'ALL') {
                console.log('   ‚ùå –ó–ê–ö–†–ò–í–ê–Ñ–ú–û –í–°–Ü –ü–û–ó–ò–¶–Ü–á');
            }
        }
        console.log('üìä ============================================\n');
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥-–∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è SPOT —Å–∏–≥–Ω–∞–ª—ñ–≤
     */
    static formatLogEntry(req, additionalData = {}) {
        const timestamp = new Date().toISOString();

        const parsedSignal = this.parseSignalSpot(req.body);

        const logEntry = {
            timestamp,
            method: req.method,
            url: req.url,
            headers: req.headers,
            query: req.query,
            body: req.body,
            params: req.params,
            ip: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent'),
            ...additionalData,
            parsedSignal
        };

        return JSON.stringify(logEntry, null, 2) + ',\n';
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥-–∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è FUTURES —Å–∏–≥–Ω–∞–ª—ñ–≤
     */
    static formatLogEntryFutures(req, additionalData = {}) {
        const timestamp = new Date().toISOString();

        const parsedSignal = this.parseSignalFutures(req.body);

        const logEntry = {
            timestamp,
            method: req.method,
            url: req.url,
            headers: req.headers,
            query: req.query,
            body: req.body,
            params: req.params,
            ip: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent'),
            ...additionalData,
            parsedSignal
        };

        return JSON.stringify(logEntry, null, 2) + ',\n';
    }
}

module.exports = TradingViewConnector;