// connectors/whitebit.js - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ nonce
const axios = require('axios');
const crypto = require('crypto');
const WebSocket = require('ws');

class WhiteBitConnector {
    constructor(config) {
        this.config = config;
        this.baseURL = 'https://whitebit.com';
        this.wsURL = 'wss://api.whitebit.com/ws';
        this.connected = false;
        this.ws = null;
        this.wsId = 1;
        this.subscriptions = new Map();

        // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó nonce
        this.lastNonce = Date.now();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ nonce
    generateNonce() {
        const now = Date.now(); // –ú—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
        // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–æ—Ä—ñ–≤–Ω—é—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É, –∑–±—ñ–ª—å—à—É—î–º–æ –Ω–∞ 1
        if (now <= this.lastNonce) {
            this.lastNonce = this.lastNonce + 1;
        } else {
            this.lastNonce = now;
        }
        return this.lastNonce;
    }


    // –ó–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
    async makeRequest(method, endpoint, params = {}, isPrivate = false) {
        try {
            const url = `${this.baseURL}/api/v4${endpoint}`;
            const config = {
                method,
                url,
                headers:{}

            };

            if (isPrivate) {
                // –î–æ–¥–∞—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
                const nonce = this.generateNonce();
                const requestBody = {
                    request: `/api/v4${endpoint}`, // –û–ë–û–í'–Ø–ó–ö–û–í–ï –ø–æ–ª–µ request
                    nonce: nonce,                  // –û–ë–û–í'–Ø–ó–ö–û–í–ï –ø–æ–ª–µ nonce (–≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö)
                    nonceWindow: true,             // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–µ –ø–æ–ª–µ
                    ...params                      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
                };

                // –í–ò–ü–†–ê–í–õ–ï–ù–û: timestamp –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
                const timestamp = Date.now(); // –ú—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –∑–∞–º—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥!

                // –ì–µ–Ω–µ—Ä—É—î–º–æ payload —Ç–∞ –ø—ñ–¥–ø–∏—Å
                const payload = Buffer.from(JSON.stringify(requestBody)).toString('base64');

                const hash = crypto.createHmac("sha512", this.config.secretKey);
                const signature = hash.update(payload).digest("hex");


                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                config.headers['Content-Type'] =  "application/json";
                config.headers['X-TXC-APIKEY'] = this.config.apiKey;
                config.headers['X-TXC-PAYLOAD'] = payload;  // –û–ë–û–í'–Ø–ó–ö–û–í–ò–ô –∑–∞–≥–æ–ª–æ–≤–æ–∫!
                config.headers['X-TXC-SIGNATURE'] = signature;

                config.data = requestBody;

                // –î–µ—Ç–∞–ª—å–Ω–∏–π –¥–µ–±–∞–≥ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                console.log(`\nüìã === WHITEBIT API DEBUG ===`);
                console.log(`üîó URL: ${url}`);
                console.log(`üìù Method: ${method}`);
                console.log(`üîë Endpoint: ${endpoint}`);
                console.log(`‚è∞ Timestamp (ms): ${timestamp}`);
                console.log(`üé≤ Nonce (ms): ${nonce}`);
                console.log(`üì¶ Request Body:`, JSON.stringify(requestBody, null, 2));
                console.log(`üîê Payload (base64):`, payload);
                console.log(`üîè Signature:`, signature);
                console.log(`üìã ========================\n`);

            } else {
                if (method === 'GET') {
                    config.params = params;
                    console.log(`üåê –ü—É–±–ª—ñ—á–Ω–∏–π GET –∑–∞–ø–∏—Ç: ${url} –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, params);
                } else {
                    config.data = params;
                    console.log(`üåê –ü—É–±–ª—ñ—á–Ω–∏–π POST –∑–∞–ø–∏—Ç: ${url} –∑ –¥–∞–Ω–∏–º–∏:`, params);
                }
            }


            const response = await axios(config);

            // –î–µ–±–∞–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (isPrivate) {
                console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ WhiteBit API:`, {
                    status: response.status,
                    dataKeys: Object.keys(response.data || {}),
                    dataSize: JSON.stringify(response.data).length,
                    responseType: typeof response.data
                });

                // –ü–æ–∫–∞–∑—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥–µ–±–∞–≥—É
                if (response.data) {
                    console.log(`üìã –ü–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:`, JSON.stringify(response.data).substring(0, 200) + '...');
                }
            }

            return response.data;
        } catch (error) {
            // –î–µ—Ç–∞–ª—å–Ω–∏–π –¥–µ–±–∞–≥ –ø–æ–º–∏–ª–æ–∫
            console.log(`\n‚ùå === WHITEBIT API ERROR ===`);

            console.error('üö´ Error Type:', error.constructor.name);
            console.error('üö´ Error Message:', error.message);



            console.log(`üìù Method: ${method}`);
            console.log(`üîë Endpoint: ${endpoint}`);

            if (error.response) {
                console.log(`üìä HTTP Status: ${error.response.status}`);
                console.log(`üìã Response Headers:`, error.response.headers);
                console.log(`üì¶ Response Data:`, JSON.stringify(error.response.data, null, 2));

                // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ WhiteBit
                if (error.response.data) {
                    const errorData = error.response.data;
                    if (errorData.message) {
                        console.log(`üö´ Error Message: ${errorData.message}`);
                    }
                    if (errorData.errors) {
                        console.log(`üö´ Detailed Errors:`, errorData.errors);
                    }
                    if (errorData.code) {
                        console.log(`üö´ Error Code: ${errorData.code}`);
                    }
                }
            } else if (error.request) {
                console.log(`üö´ No Response Received:`, error.request);
            } else {
                console.log(`üö´ Request Setup Error: ${error.message}`);
            }
            console.log(`‚ùå ========================\n`);

            const errorMessage = error.response?.data?.message || error.response?.data?.errors || error.message;
            throw new Error(`WhiteBit API –ø–æ–º–∏–ª–∫–∞: ${errorMessage}`);
        }
    }

    // –¢–µ—Å—Ç–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    async testConnection() {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ API –∫–ª—é—á—ñ–≤
            if (!this.config.apiKey || !this.config.secretKey) {
                throw new Error('API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª');
            }

            console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API...');
            await this.makeRequest('GET', '/public/ping');
            this.connected = true;
            console.log('‚úÖ –ü—É–±–ª—ñ—á–Ω–µ API –ø—Ä–∞—Ü—é—î');

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
            console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API...');
            await this.getSpotBalance();
            console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–µ API –ø—Ä–∞—Ü—é—î');

            console.log('‚úÖ WhiteBit –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é');
            return true;
        } catch (error) {
            this.connected = false;
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit:', error.message);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit: ${error.message}`);
        }
    }

    isConnected() {
        return this.connected;
    }

    // ===== –ü–£–ë–õ–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò =====

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
    async getTradingPairs() {
        try {
            const response = await this.makeRequest('GET', '/public/markets');
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä: ${error.message}`);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ü—ñ–Ω
    async getTickers(market = null) {
        try {
            const params = market ? { market } : {};
            const response = await this.makeRequest('GET', '/public/ticker', params);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω: ${error.message}`);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
    async getOrderBook(market, limit = 100) {
        try {
            const response = await this.makeRequest('GET', '/public/orderbook', {
                market,
                limit
            });
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω–∞: ${error.message}`);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤
    async getTrades(market, lastId = null) {
        try {
            const params = { market };
            if (lastId) params.lastId = lastId;

            const response = await this.makeRequest('GET', '/public/trades', params);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤: ${error.message}`);
        }
    }

    // ===== –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò (–¢–û–†–ì–Ü–í–õ–Ø) =====

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Å–ø–æ—Ç –∞–∫–∞—É–Ω—Ç–∞
    async getSpotBalance(ticker) {
        try {
            let params = {}
            if (ticker) {
                params =  {"ticker":ticker}
            }
            const response = await this.makeRequest('POST', '/trade-account/balance', params, true);

            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: ${error.message}`);
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    async createLimitOrder(market, side, amount, price, options = {}) {
        try {
            const params = {
                market,
                side, // 'buy' –∞–±–æ 'sell'
                amount: amount.toString(),
                price: price.toString(),
                ...options
            };

            const response = await this.makeRequest('POST', '/order/new', params, true);

            console.log(`üìù WhiteBit –ª—ñ–º—ñ—Ç–Ω–∏–π –æ—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${side.toUpperCase()} ${amount} ${market} –∑–∞ ${price}`);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: ${error.message}`);
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    async createMarketOrder(market, side, amount, options = {}) {
        try {
            let params = {
                market,
                side,
                amount: amount.toString(),
                "clientOrderId": "demo_order_".nonce,
                ...options
            };

            if(side=='buy'){
                params.amount = amount.toString();
            }else if(side=='sell'){
                const ticker = market.split('_')[0]

                console.log(ticker);
                const resp =   await this.getSpotBalance(ticker)

                params.amount = parseFloat(resp.available).toFixed(3);

            }

            const response = await this.makeRequest('POST', '/order/market', params, true);

            console.log(`üìà WhiteBit —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä: ${side.toUpperCase()} ${amount} ${market}`);
            return response;
        } catch (error) {
            console.log('Market order error details:', error.response?.data);
            throw error;
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${error.message}`);
        }
    }





    // –ö—É–ø—ñ–≤–ª—è –∑–∞ —Ä–∏–Ω–∫–æ–≤–æ—é —Ü—ñ–Ω–æ—é –Ω–∞ –ø–µ–≤–Ω—É —Å—É–º—É
    async buyMarketByQuote(market, quoteAmount, options = {}) {
        try {
            const params = {
                market,
                side: 'buy',
                quoteAmount: quoteAmount.toString(),
                ...options
            };

            const response = await this.makeRequest('POST', '/order/stock_market', params, true);

            console.log(`üí∞ WhiteBit –∫—É–ø—ñ–≤–ª—è –Ω–∞ —Å—É–º—É: ${quoteAmount} –≤ ${market}`);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ –∑–∞ —Å—É–º–æ—é: ${error.message}`);
        }
    }

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
    async cancelOrder(market, orderId) {
        try {
            const response = await this.makeRequest('POST', '/order/cancel', {
                market,
                orderId: parseInt(orderId)
            }, true);

            console.log(`‚ùå WhiteBit –æ—Ä–¥–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ: ${orderId}`);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: ${error.message}`);
        }
    }

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤
    async cancelAllOrders(market = null) {
        try {
            const params = market ? { market } : {};
            const response = await this.makeRequest('POST', '/order/cancel/all', params, true);

            console.log(`‚ùå WhiteBit –≤—Å—ñ –æ—Ä–¥–µ—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ${market ? ` –¥–ª—è ${market}` : ''}`);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤: ${error.message}`);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
    async getActiveOrders(market = null, limit = 50, offset = 0) {
        try {
            const params = { limit, offset };
            if (market) params.market = market;

            const response = await this.makeRequest('POST', '/orders', params, true);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤: ${error.message}`);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ—Ä–¥–µ—Ä—ñ–≤
    async getOrderHistory(market = null, limit = 50, offset = 0) {
        try {
            const params = { limit, offset };
            if (market) params.market = market;

            const response = await this.makeRequest('POST', '/order/history', params, true);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –æ—Ä–¥–µ—Ä—ñ–≤: ${error.message}`);
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤
    async getTradeHistory(market = null, limit = 50, offset = 0) {
        try {
            const params = { limit, offset };
            if (market) params.market = market;

            const response = await this.makeRequest('POST', '/trade-account/executed-history', params, true);
            return response;
        } catch (error) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤: ${error.message}`);
        }
    }

    // ===== WEBSOCKET –ú–ï–¢–û–î–ò =====

    connectWebSocket() {
        this.ws = new WebSocket(this.wsURL);

        this.ws.on('open', () => {
            console.log('üîó WhiteBit WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            this.connected = true;
        });

        this.ws.on('message', (data) => {
            try {
                const message = JSON.parse(data);
                this.handleWebSocketMessage(message);
            } catch (error) {
                console.error('WhiteBit WS –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:', error);
            }
        });

        this.ws.on('close', () => {
            console.log('üîó WhiteBit WebSocket –∑–∞–∫—Ä–∏—Ç–æ');
            this.connected = false;
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (!this.connected) {
                    console.log('üîÑ WhiteBit –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
                    this.connectWebSocket();
                }
            }, 5000);
        });

        this.ws.on('error', (error) => {
            console.error('WhiteBit WebSocket –ø–æ–º–∏–ª–∫–∞:', error);
        });
    }

    // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü—ñ–Ω–∏
    subscribeToTicker(market, callback) {
        const id = this.wsId++;
        this.subscriptions.set(`ticker_${market}`, { id, callback });

        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                id,
                method: 'ticker_subscribe',
                params: [market]
            }));
        }

        console.log(`üìà WhiteBit –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü—ñ–Ω–∏: ${market}`);
        return id;
    }

    // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
    subscribeToDepth(market, limit = 100, callback) {
        const id = this.wsId++;
        this.subscriptions.set(`depth_${market}`, { id, callback });

        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                id,
                method: 'depth_subscribe',
                params: [market, limit, "0", true]
            }));
        }

        console.log(`üìä WhiteBit –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω: ${market}`);
        return id;
    }

    // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–∏
    subscribeToTrades(market, callback) {
        const id = this.wsId++;
        this.subscriptions.set(`trades_${market}`, { id, callback });

        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                id,
                method: 'deals_subscribe',
                params: [market]
            }));
        }

        console.log(`üíπ WhiteBit –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–∏: ${market}`);
        return id;
    }

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å WebSocket
    handleWebSocketMessage(message) {
        if (message.method) {
            switch (message.method) {
                case 'ticker_update':
                    this.handleTickerUpdate(message.params);
                    break;
                case 'depth_update':
                    this.handleDepthUpdate(message.params);
                    break;
                case 'deals_update':
                    this.handleTradesUpdate(message.params);
                    break;
                default:
                    console.log('WhiteBit –Ω–µ–≤—ñ–¥–æ–º–∏–π –º–µ—Ç–æ–¥:', message.method);
            }
        }
    }

    handleTickerUpdate(params) {
        const [market, data] = params;
        const subscription = this.subscriptions.get(`ticker_${market}`);

        if (subscription && subscription.callback) {
            subscription.callback({
                market,
                price: parseFloat(data.last),
                volume: parseFloat(data.volume),
                change: parseFloat(data.change),
                timestamp: Date.now()
            });
        }
    }

    handleDepthUpdate(params) {
        const [fullUpdate, market, data] = params;
        const subscription = this.subscriptions.get(`depth_${market}`);

        if (subscription && subscription.callback) {
            subscription.callback({
                market,
                fullUpdate,
                bids: data.bids || [],
                asks: data.asks || [],
                timestamp: Date.now()
            });
        }
    }

    handleTradesUpdate(params) {
        const [market, trades] = params;
        const subscription = this.subscriptions.get(`trades_${market}`);

        if (subscription && subscription.callback) {
            subscription.callback({
                market,
                trades: trades.map(trade => ({
                    id: trade.id,
                    price: parseFloat(trade.price),
                    amount: parseFloat(trade.amount),
                    side: trade.type,
                    timestamp: trade.time
                }))
            });
        }
    }

    // –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–æ–∫
    unsubscribeAll() {
        for (const [key, subscription] of this.subscriptions.entries()) {
            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                const method = key.split('_')[0] + '_unsubscribe';
                this.ws.send(JSON.stringify({
                    id: subscription.id,
                    method,
                    params: []
                }));
            }
        }
        this.subscriptions.clear();
        console.log('üîó WhiteBit –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
    }

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    disconnect() {
        this.unsubscribeAll();
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        this.connected = false;
        console.log('üîó WhiteBit –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');
    }
}

module.exports = WhiteBitConnector;



