//@version=6
strategy("Volatility Strategy with Price Zones and Whitebit API", overlay=true, margin_long=100, margin_short=100, pyramiding=0, commission_type=strategy.commission.percent, commission_value=0.1)

// –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
stopLossPerc = input.float(8.0, title="Stop Loss %") / 100
takeProfitPerc = input.float(1.5, title="Take Profit %") / 100
positionSizeUSD = input.float(100, title="Position Size (USD)")
lookbackPeriod = input.int(10, title="Lookback Period for Extremums")
rsiLength = input.int(14, title="RSI Length")
rsiOverbought = input.int(65, title="RSI Overbought")
rsiOversold = input.int(35, title="RSI Oversold")
daysBack = input.int(20, title="Trading Period (Days)")

// –ù–û–í–Ü –ü–ê–†–ê–ú–ï–¢–†–ò –î–õ–Ø –¶–Ü–ù–û–í–ò–• –ó–û–ù
upperPrice = input.float(210, title="–í–µ—Ä—Ö–Ω—è —Ü—ñ–Ω–∞", minval=0)
lowerPrice = input.float(184, title="–ù–∏–∂–Ω—è —Ü—ñ–Ω–∞", minval=0)
zoneStrength = input.float(0.7, title="–°–∏–ª–∞ –≤–ø–ª–∏–≤—É –∑–æ–Ω–∏", minval=0.1, maxval=1.0)

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ
isTradingPeriod() =>
    startDate = timestamp(year(timenow), month(timenow), dayofmonth(timenow) - daysBack, 0, 0)
    time >= startDate

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å—Ç—Ä–µ–º—É–º—ñ–≤
isLocalLow() =>
    ta.lowest(low, lookbackPeriod) == low

isLocalHigh() =>
    ta.highest(high, lookbackPeriod) == high

// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø - –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ü–û–õ–û–ñ–ï–ù–ù–Ø –í–Ü–î–ù–û–°–ù–û –ó–û–ù
getZonePosition() =>
    middlePrice = (upperPrice + lowerPrice) / 2
    distanceToUpper = math.abs(upperPrice - close) / (upperPrice - lowerPrice)
    distanceToLower = math.abs(lowerPrice - close) / (upperPrice - lowerPrice)

    if close <= lowerPrice
        -1.0  // –î—É–∂–µ –±–ª–∏–∑—å–∫–æ –¥–æ –Ω–∏–∂–Ω—å–æ—ó –∑–æ–Ω–∏ - —Å–∏–ª—å–Ω–∏–π –ª–æ–Ω–≥
    else if close >= upperPrice
        1.0   // –î—É–∂–µ –±–ª–∏–∑—å–∫–æ –¥–æ –≤–µ—Ä—Ö–Ω—å–æ—ó –∑–æ–Ω–∏ - —Å–∏–ª—å–Ω–∏–π —à–æ—Ä—Ç
    else if close < middlePrice
        -distanceToLower * zoneStrength  // –ë–ª–∏–∂—á–µ –¥–æ –Ω–∏–∂–Ω—å–æ—ó –∑–æ–Ω–∏ - –ª–æ–Ω–≥
    else
        distanceToUpper * zoneStrength   // –ë–ª–∏–∂—á–µ –¥–æ –≤–µ—Ä—Ö–Ω—å–æ—ó –∑–æ–Ω–∏ - —à–æ—Ä—Ç

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
rsi = ta.rsi(close, rsiLength)
zoneFactor = getZonePosition()

// –ü–û–ö–†–ê–©–ï–ù–Ü –£–ú–û–í–ò –í–•–û–î–£ –ó –í–†–ê–•–£–í–ê–ù–ù–Ø–ú –¶–Ü–ù–û–í–ò–• –ó–û–ù
longCondition = (isLocalLow() or zoneFactor < -0.3) and rsi < rsiOverbought and zoneFactor < 0
shortCondition = (isLocalHigh() or zoneFactor > 0.3) and rsi > rsiOversold and zoneFactor > 0

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–æ–Ω–µ—Ç
positionSizeCoins = positionSizeUSD / close

// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
var float totalProfit = 0.0
var int totalTrades = 0
var int winTrades = 0
var int lossTrades = 0
var float largestWin = 0.0
var float largestLoss = 0.0
var float currentProfit = 0.0

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —É–≥–æ–¥–∏
if strategy.closedtrades > totalTrades
    lastTradeProfit = strategy.closedtrades.profit(totalTrades)
    totalProfit := totalProfit + lastTradeProfit
    totalTrades := totalTrades + 1

    if lastTradeProfit > 0
        winTrades := winTrades + 1
        largestWin := math.max(largestWin, lastTradeProfit)
    else
        lossTrades := lossTrades + 1
        largestLoss := math.min(largestLoss, lastTradeProfit)

// –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
currentProfit := strategy.openprofit

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
winRate = totalTrades > 0 ? (winTrades / totalTrades) * 100 : 0
avgWin = winTrades > 0 ? (totalProfit > 0 ? totalProfit : 0) / winTrades : 0
avgLoss = lossTrades > 0 ? (totalProfit < 0 ? math.abs(totalProfit) : 0) / lossTrades : 0
profitFactor = avgLoss > 0 ? avgWin / avgLoss : avgWin > 0 ? 100 : 0

// –ë–û–¢ ID –¥–ª—è Whitebit API
botId = "e5009c035e87043ed06ccde0"
symbol = "SOL-USDT"
timeframe = "5M"
botName = "ENBIiG"

// –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è Whitebit API
enterLongCommand = "ENTER-LONG_WHITEBIT_SOL-USDT_BOT-NAME-ENBIiG_5M_e5009c035e87043ed06ccde0"
enterShortCommand = "ENTER-SHORT_WHITEBIT_SOL-USDT_BOT-NAME-ENBIiG_5M_e5009c035e87043ed06ccde0"
exitLongCommand = "EXIT-LONG_WHITEBIT_SOL-USDT_BOT-NAME-ENBIiG_5M_e5009c035e87043ed06ccde0"
exitShortCommand = "EXIT-SHORT_WHITEBIT_SOL-USDT_BOT-NAME-ENBIiG_5M_e5009c035e87043ed06ccde0"

// –õ–æ–≥—ñ–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ API
if (isTradingPeriod())
    if (longCondition and strategy.position_size == 0)
        strategy.entry(enterLongCommand, strategy.long, qty=positionSizeCoins)

    if (shortCondition and strategy.position_size == 0)
        strategy.entry(enterShortCommand, strategy.short, qty=positionSizeCoins)

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –≤–∏—Ö–æ–¥–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ API
if (strategy.position_size > 0)
    entryPrice = strategy.position_avg_price
    stopLossPrice = entryPrice * (1 - stopLossPerc)
    takeProfitPrice = entryPrice * (1 + takeProfitPerc)

    if (low <= stopLossPrice)
        strategy.close(enterLongCommand, comment=exitLongCommand)
    else if (high >= takeProfitPrice)
        strategy.close(enterLongCommand, comment=exitLongCommand)

if (strategy.position_size < 0)
    entryPrice = strategy.position_avg_price
    stopLossPrice = entryPrice * (1 + stopLossPerc)
    takeProfitPrice = entryPrice * (1 - takeProfitPerc)

    if (high >= stopLossPrice)
        strategy.close(enterShortCommand, comment=exitShortCommand)
    else if (low <= takeProfitPrice)
        strategy.close(enterShortCommand, comment=exitShortCommand)

// –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –¶–Ü–ù–û–í–ò–• –ó–û–ù
// –í–µ—Ä—Ö–Ω—è –∑–æ–Ω–∞
upperLine = plot(upperPrice, color=color.red, linewidth=2, title="–í–µ—Ä—Ö–Ω—è —Ü—ñ–Ω–∞")
upperZone = plot(upperPrice * 0.98, color=color.new(color.red, 90), linewidth=1, title="–í–µ—Ä—Ö–Ω—è –∑–æ–Ω–∞")
fill(upperLine, upperZone, color=color.new(color.red, 95))

// –ù–∏–∂–Ω—è –∑–æ–Ω–∞
lowerLine = plot(lowerPrice, color=color.green, linewidth=2, title="–ù–∏–∂–Ω—è —Ü—ñ–Ω–∞")
lowerZone = plot(lowerPrice * 1.02, color=color.new(color.green, 90), linewidth=1, title="–ù–∏–∂–Ω—è –∑–æ–Ω–∞")
fill(lowerLine, lowerZone, color=color.new(color.green, 95))

// –°–µ—Ä–µ–¥–Ω—è –ª—ñ–Ω—ñ—è
middlePrice = (upperPrice + lowerPrice) / 2
plot(middlePrice, color=color.yellow, linewidth=1, title="–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞")

// –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ª–æ–∂–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –∑–æ–Ω
var zoneLabel = label.new(x=bar_index, y=na, text="", style=label.style_label_center, color=color.new(color.purple, 80))
if barstate.islast
    label.set_xy(zoneLabel, bar_index, middlePrice)
    zoneText = "–ü–û–õ–û–ñ–ï–ù–ù–Ø: "
    zoneColor = color.gray

    if zoneFactor <= -0.5
        zoneText := zoneText + "–°–ò–õ–¨–ù–ò–ô –õ–û–ù–ì"
        zoneColor := color.green
    else if zoneFactor <= -0.2
        zoneText := zoneText + "–õ–û–ù–ì"
        zoneColor := color.lime
    else if zoneFactor >= 0.5
        zoneText := zoneText + "–°–ò–õ–¨–ù–ò–ô –®–û–†–¢"
        zoneColor := color.red
    else if zoneFactor >= 0.2
        zoneText := zoneText + "–®–û–†–¢"
        zoneColor := color.orange
    else
        zoneText := zoneText + "–ù–ï–ô–¢–†–ê–õ–¨–ù–û"
        zoneColor := color.gray

    label.set_text(zoneLabel, zoneText + "\n–§–∞–∫—Ç–æ—Ä: " + str.tostring(zoneFactor, "#.##"))
    label.set_color(zoneLabel, zoneColor)

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ—á–æ–∫ –≤—Ö–æ–¥—É –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—É
plotshape(longCondition and isTradingPeriod() and strategy.position_size == 0 ? low * 0.998 : na,
     style=shape.triangleup, location=location.belowbar,
     color=zoneFactor < -0.5 ? color.green : color.lime, size=size.normal,
     text="LONG")

plotshape(shortCondition and isTradingPeriod() and strategy.position_size == 0 ? high * 1.002 : na,
     style=shape.triangledown, location=location.abovebar,
     color=zoneFactor > 0.5 ? color.red : color.orange, size=size.normal,
     text="SHORT")

// –Ü–ù–§–û–†–ú–ê–¶–Ü–ô–ù–ê –ü–ê–ù–ï–õ–¨
var table statsTable = table.new(position.top_right, 3, 18, bgcolor=color.new(color.gray, 95), border_width=2)

if barstate.islast
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    table.cell(statsTable, 0, 0, "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ê–¢–ï–ì–Ü–á", text_color=color.white, bgcolor=color.blue)

    // Whitebit API Info
    table.cell(statsTable, 0, 1, "ü§ñ WHITEBIT API:", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 1, 1, "BOT ID:", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 2, 1, botId, text_color=color.white, bgcolor=color.new(color.gray, 90))

    // –¶—ñ–Ω–æ–≤—ñ –∑–æ–Ω–∏
    table.cell(statsTable, 0, 2, "–¶—ñ–Ω–æ–≤—ñ –∑–æ–Ω–∏:", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 1, 2, "–†—ñ–≤–µ–Ω—å", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 2, 2, "–ü–æ—Ç–æ—á–Ω–∞", text_color=color.yellow, bgcolor=color.new(color.gray, 90))

    table.cell(statsTable, 0, 3, "–í–µ—Ä—Ö–Ω—è:")
    table.cell(statsTable, 1, 3, "$" + str.tostring(upperPrice))
    table.cell(statsTable, 2, 3, close >= upperPrice ? "üî¥ –î–û–°–Ø–ì–ù–£–¢–ê" : "‚ö™ –ù–∏–∂—á–µ",
              bgcolor=close >= upperPrice ? color.new(color.red, 80) : color.new(color.gray, 80))

    table.cell(statsTable, 0, 4, "–ù–∏–∂–Ω—è:")
    table.cell(statsTable, 1, 4, "$" + str.tostring(lowerPrice))
    table.cell(statsTable, 2, 4, close <= lowerPrice ? "üü¢ –î–û–°–Ø–ì–ù–£–¢–ê" : "‚ö™ –í–∏—â–µ",
              bgcolor=close <= lowerPrice ? color.new(color.green, 80) : color.new(color.gray, 80))

    table.cell(statsTable, 0, 5, "–§–∞–∫—Ç–æ—Ä –∑–æ–Ω–∏:")
    table.cell(statsTable, 1, 5, str.tostring(zoneFactor, "#.##"))
    zoneColor = zoneFactor < -0.3 ? color.green : zoneFactor > 0.3 ? color.red : color.gray
    zoneText = zoneFactor < -0.3 ? "üü¢ –õ–û–ù–ì" : zoneFactor > 0.3 ? "üî¥ –®–û–†–¢" : "‚ö™ –ù–ï–ô–¢–†"
    table.cell(statsTable, 2, 5, zoneText, bgcolor=zoneColor)

    // –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    table.cell(statsTable, 0, 6, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 1, 6, "–ó–Ω–∞—á–µ–Ω–Ω—è", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 2, 6, "–†–µ–∑—É–ª—å—Ç–∞—Ç", text_color=color.yellow, bgcolor=color.new(color.gray, 90))

    table.cell(statsTable, 0, 7, "–£–≥–æ–¥–∏:")
    table.cell(statsTable, 1, 7, str.tostring(totalTrades))
    table.cell(statsTable, 2, 7, "", bgcolor=color.new(color.gray, 80))

    table.cell(statsTable, 0, 8, "–í–∏–Ω—Ä–µ–π—Ç:")
    table.cell(statsTable, 1, 8, str.tostring(winRate, "#.##") + "%")
    table.cell(statsTable, 2, 8, winRate >= 50 ? "‚úÖ –•–æ—Ä–æ—à–æ" : "‚ùå –ü–æ–≥–∞–Ω–æ",
              bgcolor=winRate >= 50 ? color.new(color.green, 80) : color.new(color.red, 80))

    table.cell(statsTable, 0, 9, "–ó–∞–≥–∞–ª—å–Ω–∏–π PnL:")
    table.cell(statsTable, 1, 9, "$" + str.tostring(totalProfit, "#.##"))
    table.cell(statsTable, 2, 9, totalProfit >= 0 ? "‚úÖ –ü—Ä–∏–±—É—Ç–æ–∫" : "‚ùå –ó–±–∏—Ç–æ–∫",
              bgcolor=totalProfit >= 0 ? color.new(color.green, 80) : color.new(color.red, 80))

    table.cell(statsTable, 0, 10, "–ü–æ—Ç–æ—á–Ω–∏–π PnL:")
    table.cell(statsTable, 1, 10, "$" + str.tostring(currentProfit, "#.##"))
    table.cell(statsTable, 2, 10, currentProfit >= 0 ? "üìà –í –ø–ª—é—Å—ñ" : "üìâ –í –º—ñ–Ω—É—Å—ñ",
              bgcolor=currentProfit >= 0 ? color.new(color.green, 80) : color.new(color.red, 80))

    // API Commands Info
    table.cell(statsTable, 0, 11, "üîó API –ö–û–ú–ê–ù–î–ò:", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 1, 11, "–¢–∏–ø", text_color=color.yellow, bgcolor=color.new(color.gray, 90))
    table.cell(statsTable, 2, 11, "–ö–æ–º–∞–Ω–¥–∞", text_color=color.yellow, bgcolor=color.new(color.gray, 90))

    table.cell(statsTable, 0, 12, "–í—Ö—ñ–¥ LONG:")
    table.cell(statsTable, 1, 12, "ENTER-LONG")
    table.cell(statsTable, 2, 12, enterLongCommand, text_color=color.white)

    table.cell(statsTable, 0, 13, "–í—Ö—ñ–¥ SHORT:")
    table.cell(statsTable, 1, 13, "ENTER-SHORT")
    table.cell(statsTable, 2, 13, enterShortCommand, text_color=color.white)

    table.cell(statsTable, 0, 14, "–í–∏—Ö—ñ–¥ LONG:")
    table.cell(statsTable, 1, 14, "EXIT-LONG")
    table.cell(statsTable, 2, 14, exitLongCommand, text_color=color.white)

    table.cell(statsTable, 0, 15, "–í–∏—Ö—ñ–¥ SHORT:")
    table.cell(statsTable, 1, 15, "EXIT-SHORT")
    table.cell(statsTable, 2, 15, exitShortCommand, text_color=color.white)

// –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
bgcolor(isTradingPeriod() ? color.new(color.gray, 95) : na)