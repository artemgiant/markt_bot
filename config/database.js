const { Pool } = require('pg');

class Database {
    constructor() {
        this.pool = null;
    }

    async connect() {
        if (this.pool) {
            return this.pool;
        }

        console.log('üóÑÔ∏è  –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

        try {
            this.pool = new Pool({
                host: process.env.DB_HOST || 'localhost',
                port: process.env.DB_PORT || 5432,
                database: process.env.DB_DATABASE || 'crypto_bot',
                user: process.env.DB_USER || 'postgres',
                password: process.env.DB_PASSWORD,
                max: 20, // –º–∞–∫—Å–∏–º—É–º –∑'—î–¥–Ω–∞–Ω—å
                idleTimeoutMillis: 30000,
                connectionTimeoutMillis: 2000,
            });

            // –¢–µ—Å—Ç–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            await this.pool.query('SELECT NOW()');
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');

            // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            this.pool.on('error', (err) => {
                console.error('‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ë–î:', err);
            });

            return this.pool;

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', error.message);
            this.pool = null;
            throw error;
        }
    }

    async query(text, params) {
        if (!this.pool) {
            throw new Error('Database not connected');
        }
        return this.pool.query(text, params);
    }

    async disconnect() {
        if (this.pool) {
            await this.pool.end();
            this.pool = null;
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞');
        }
    }

    isConnected() {
        return this.pool !== null;
    }
}

// Singleton instance
const database = new Database();

module.exports = database;