// app.js
require('dotenv').config();
const express = require('express');
const path = require('path');

const WhiteBitConnector = require('./connectors/whitebit');
const RiskManager = require('./engine/risk');
const WebSocketManager = require('./websocket/manager');
const database = require('./config/database');
const monitoring = require('./connectors/monitoring');

const { initModels } = require('./database/models');
const { initServices } = require('./services');
const { initControllers } = require('./controllers');
const { setupMiddleware, errorHandler, notFoundHandler } = require('./middleware');
const setupRoutes = require('./routes');

// –Ü–º–ø–æ—Ä—Ç —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ—É—Ç—ñ–≤
const monitoringRoutes = require('./routes/monitoring');
const settingsRoutes = require('./routes/settings');

class CryptoSpotBot {
    constructor(options = {}) {
        this.app = express();
        this.enabledExchanges = ['whitebit'];
        this.exchanges = {};
        this.db = null;
        this.models = null;
        this.services = null;
        this.controllers = null;
        this.isRunning = false;

        console.log(`üéØ –ó–∞–ø—É—Å–∫ –∑ –±—ñ—Ä–∂–µ—é: WhiteBit`);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
     */
    async init() {
        try {
            // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
            this.db = await database.connect();
            console.log('‚úÖ –ë–î –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π
            this.models = initModels(this.db);
            console.log('‚úÖ –ú–æ–¥–µ–ª—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ñ–≤
            this.setupConnectors();

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
            this.services = initServices(
                this.models,
                this.exchanges,
                path.join(__dirname, 'logs')
            );
            console.log('‚úÖ –°–µ—Ä–≤—ñ—Å–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤
            this.controllers = initControllers(this.services);
            console.log('‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware
            this.setupMiddleware();

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è engine
            this.setupEngine();

            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ—É—Ç—ñ–≤
            this.setupRoutes();

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ DB –≤ app.locals –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞—Ö
            this.app.locals.db = this.db;

            console.log('‚úÖ CryptoSpotBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return this;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ñ–≤ –¥–æ –±—ñ—Ä–∂
     */
    setupConnectors() {
        console.log('üîå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WhiteBit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞...');

        this.exchanges.whitebit = new WhiteBitConnector({
            apiKey: process.env.WHITEBIT_API_KEY,
            secretKey: process.env.WHITEBIT_SECRET_KEY
        });

        console.log('‚úÖ WhiteBit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware
     */
    setupMiddleware() {
        setupMiddleware(this.app, monitoring);

        // –Ü—Å–Ω—É—é—á—ñ —Ä–æ—É—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        this.app.use('/monitoring', monitoringRoutes);
        this.app.use('/settings', settingsRoutes);
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
     */
    setupEngine() {
        this.riskManager = new RiskManager({
            maxPositionSize: parseFloat(process.env.MAX_POSITION_SIZE) || 1000,
            riskPercentage: parseFloat(process.env.RISK_PERCENTAGE) || 2
        });

        this.wsManager = new WebSocketManager({
            exchanges: this.exchanges
        });

        console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ—É—Ç—ñ–≤
     */
    setupRoutes() {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API —Ä–æ—É—Ç—ñ–≤
        setupRoutes(this.app, this.controllers);

        // Error handling middleware (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º)
        this.app.use(notFoundHandler);
        this.app.use(errorHandler);

        console.log('‚úÖ –†–æ—É—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
     */
    async start() {
        if (this.isRunning) {
            throw new Error('‚ö†Ô∏è –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∑ WhiteBit`);

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit
        try {
            await this.exchanges.whitebit.testConnection();
            console.log(`‚úÖ WhiteBit –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
        } catch (error) {
            console.error(`‚ö†Ô∏è WhiteBit –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            throw error;
        }

        // –ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (this.wsManager) {
            await this.wsManager.start();
        }

        this.isRunning = true;
        console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ WhiteBit`);
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
     */
    async stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è –ë–æ—Ç –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ');
            return;
        }

        console.log('üõë –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤
        try {
            await this.exchanges.whitebit.cancelAllOrders();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤:', error.message);
        }

        // –ó—É–ø–∏–Ω–∫–∞ WebSocket
        if (this.wsManager) {
            await this.wsManager.stop();
        }

        // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
        if (this.exchanges.whitebit.disconnect) {
            this.exchanges.whitebit.disconnect();
        }

        this.isRunning = false;
        console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
     */
    listen(port = null) {
        const serverPort = port || process.env.PORT || 3000;
        this.server = this.app.listen(serverPort, () => {
            console.log(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${serverPort}`);
        });
        return this.server;
    }

    /**
     * Graceful shutdown
     */
    async shutdown() {
        console.log('üõë –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...');

        try {
            // –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞ —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î
            if (this.isRunning) {
                await this.stop();
            }

            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            if (this.server) {
                await new Promise((resolve, reject) => {
                    this.server.close((err) => {
                        if (err) reject(err);
                        else resolve();
                    });
                });
                console.log('‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ');
            }

            // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            if (this.db) {
                await database.disconnect();
                console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            console.log('‚úÖ Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ shutdown:', error);
            process.exit(1);
        }
    }
}

module.exports = CryptoSpotBot;