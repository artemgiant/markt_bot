const { Pool } = require('pg');

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const pool = new Pool({
    user: 'remote_root',
    host: '164.92.139.111',      // IP –∞–¥—Ä–µ—Å–∞ –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    database: 'market_bot',
    password: 'aR9^zN(chG4$wV6',
    port: 5432,
});

async function testConnection() {
    try {
        console.log('–°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...');

        // –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const client = await pool.connect();
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL —É—Å–ø—ñ—à–Ω–µ!');

        // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç–∫—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        const result = await client.query(`
      SELECT 
        NOW() as current_time,
        CURRENT_DATABASE() as database_name,
        CURRENT_USER as current_user,
        version() as postgres_version
    `);

        const info = result.rows[0];

        console.log('üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:');
        console.log('   üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —Å–µ—Ä–≤–µ—Ä–∞:', info.current_time);
        console.log('   üóÑÔ∏è  –ù–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', info.database_name);
        console.log('   üë§ –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', info.current_user);
        console.log('   üöÄ –í–µ—Ä—Å—ñ—è PostgreSQL:', info.postgres_version.split(' ')[0] + ' ' + info.postgres_version.split(' ')[1]);

        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä
        const serverInfo = await client.query(`
      SELECT 
        CURRENT_CATALOG as catalog_name,
        inet_server_addr() as server_ip,
        inet_server_port() as server_port
    `);

        const server = serverInfo.rows[0];
        console.log('   üìÇ –ö–∞—Ç–∞–ª–æ–≥ (–Ω–∞–∑–≤–∞ –ë–î):', server.catalog_name);
        console.log('   üåê IP —Å–µ—Ä–≤–µ—Ä–∞:', server.server_ip || 'localhost');
        console.log('   üîå –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞:', server.server_port);

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        client.release();
        console.log('üîå –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');

    } catch (error) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL:');
        console.log('   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
        console.log('   –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏:', error.code);

        if (error.code === 'ECONNREFUSED') {
            console.log('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π PostgreSQL —Å–µ—Ä–≤–µ—Ä');
        } else if (error.code === '28P01') {
            console.log('üí° –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á');
        } else if (error.code === '3D000') {
            console.log('üí° –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ—Å–Ω—É—î');
        } else if (error.code === 'ENOTFOUND') {
            console.log('üí° –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } finally {
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—É–ª—É –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
        await pool.end();
        console.log('üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testConnection();
