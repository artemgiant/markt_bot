// controllers/tradingview.controller.js
const TradingViewConnector = require('../connectors/trading_view');
const { getCurrentISODate } = require('../utils');

class TradingViewController {
    constructor(services) {
        this.tradingService = services.trading;
        this.loggingService = services.logging;
        this.exchangeService = services.exchange;
        this.tradeHistoryModel = services.trading.tradeHistoryModel;
    }
    static TRADE_AMOUNT = 0.04;
    /**
     * ============================================
     * –ü–£–ë–õ–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò - Entry Points
     * ============================================
     */

    /**
     * –û–±—Ä–æ–±–∫–∞ SPOT –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ TradingView
     * POST /api/trading_view/spot
     */
    async handleSpotWebhook(req, res) {
        try {
            console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–æ SPOT –∑–∞–ø–∏—Ç –≤—ñ–¥ TradingView');
            console.log('Method:', req.method);
            console.log('Body:', req.body);

            // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            this._validateBaseRequest(req);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î (—Ç—ñ–ª—å–∫–∏ –¥–ª—è spot)
            this._validateDatabaseConnection(req);

            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const logData = TradingViewConnector.formatLogEntry(req, {
                route: '/api/trading_view/spot',
                type: 'spot_signal'
            });

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤ —Ñ–∞–π–ª
            await this.loggingService.logToFile(logData, 'trading_view_logs');

            // –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            const result = await this.tradingService.processTradingViewSignal(req.body);

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤ –ë–î
            await this.loggingService.logInfo(
                'trading_view_spot',
                `TradingView SPOT ${result.signal.action} signal for ${result.signal.coinCode}`,
                {
                    signal: result.signal,
                    order: result.order,
                    orderError: result.error,
                    amount: 6,
                    request: {
                        method: req.method,
                        url: req.url,
                        body: req.body,
                        query: req.query,
                        ip: req.ip,
                        headers: {
                            'content-type': req.headers['content-type'],
                            'user-agent': req.headers['user-agent']
                        }
                    },
                    timestamp: getCurrentISODate()
                },
                false // –ù–µ –ª–æ–≥—É—î–º–æ –≤ —Ñ–∞–π–ª, –≤–∂–µ –∑–∞–ª–æ–≥—É–≤–∞–ª–∏ –≤–∏—â–µ
            );

            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            this._sendResponse(res, {
                success: result.success,
                message: result.order
                    ? 'Order created and logged successfully'
                    : 'Signal received but order failed',
                data: {
                    signal: result.signal,
                    order: result.order,
                    error: result.error,
                    logged: {
                        file: true,
                        database: true
                    }
                }
            });

        } catch (error) {
            this._handleError(res, error, req);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ FUTURES –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ TradingView
     * POST /api/trading_view/futures
     */
    async handleFuturesWebhook(req, res) {


        try {
            console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–æ FUTURES –∑–∞–ø–∏—Ç –≤—ñ–¥ TradingView');
            console.log('Method:', req.method);
            console.log('Body:', req.body);

            // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            this._validateBaseRequest(req);

            // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è futures (–ø–æ–∫–∏ –ø—É—Å—Ç–∞)
            this._validateFuturesRequirements(req);

            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const logData = TradingViewConnector.formatLogEntryFutures(req, {
                route: '/api/trading_view/futures',
                type: 'futures_signal'
            });

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤ —Ñ–∞–π–ª
            await this.loggingService.logToFile(logData, 'trading_view_logs');

            // –û–±—Ä–æ–±–∫–∞ futures —Å–∏–≥–Ω–∞–ª—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            const result = await this.tradingService.processFuturesSignal(req.body);





            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –≤ –ë–î (–≤ —Ç—É —Å–∞–º—É —Ç–∞–±–ª–∏—Ü—é system_logs)
            await this.loggingService.logInfo(
                'trading_view_futures',
                `TradingView FUTURES ${result.signal.action}-${result.signal.positionType} signal for ${result.signal.coinCode}`,
                {
                    signal: result.signal,
                    request: {
                        method: req.method,
                        url: req.url,
                        body: req.body,
                        query: req.query,
                        ip: req.ip,
                        headers: {
                            'content-type': req.headers['content-type'],
                            'user-agent': req.headers['user-agent']
                        }
                    },
                    timestamp: getCurrentISODate()
                },
                false // –ù–µ –ª–æ–≥—É—î–º–æ –≤ —Ñ–∞–π–ª, –≤–∂–µ –∑–∞–ª–æ–≥—É–≤–∞–ª–∏ –≤–∏—â–µ
            );




            const connector = this.exchangeService.getConnector('whitebit');

            if (!connector) {
                console.error('‚ùå WhiteBit connector –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            } else {

                try {

                    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –±—ñ—Ä–∂—ñ
                    const orderResult = await connector.createCollateralMarketOrder(
                        result.signal.coinCode,              // market: "SOL_USDT"
                        result.signal.side,                              // side: "buy" –∞–±–æ "sell"
                        TradingViewController.TRADE_AMOUNT // amount: –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ 10
                    );

                    // const orderResult = {
                    //     orderId: 1825725014975,
                    //     clientOrderId: '',
                    //     market: 'SOL_USDT',
                    //     side: 'buy',
                    //     type: 'margin market',
                    //     timestamp: 1760798847.814476,
                    //     dealMoney: '7.427752',
                    //     dealStock: '0.04',
                    //     amount: '0.04',
                    //     left: '0',
                    //     dealFee: '0.007427752',
                    //     ioc: false,
                    //     status: 'FILLED',
                    //     postOnly: false,
                    //     stp: 'no'
                    // };




                    // –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
                    console.log('‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', orderResult);

                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
                    try {
                        const savedTrade = await this.tradeHistoryModel.create({
                            signal: result.signal,  // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª
                            order: orderResult      // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±—ñ—Ä–∂—ñ
                        });

                        console.log('üíæ –£–≥–æ–¥—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î, ID:', savedTrade.id);
                    } catch (dbError) {
                        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î - –ª–æ–≥—É—î–º–æ, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î:', dbError.message);
                    }


                }catch(orderError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±—ñ—Ä–∂—ñ:', orderError.message);
                }
            }



            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            this._sendResponse(res, {
                success: result.success,
                message: 'Futures signal received and logged',
                data: {
                    signal: result.signal,
                    logged: {
                        file: true,
                        database: true
                    }
                }
            });

        } catch (error) {
            this._handleError(res, error, req);
        }
    }

    /**
     * ============================================
     * –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò - Helpers (–í–∞—Ä—ñ–∞–Ω—Ç B)
     * ============================================
     */

    /**
     * –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å req.body
     */
    _validateBaseRequest(req) {
        if (!req.body) {
            throw new Error('Request body is missing');
        }

        const bodyString = typeof req.body === 'string' ? req.body : JSON.stringify(req.body);

        if (!bodyString || bodyString.trim() === '' || bodyString === '{}') {
            throw new Error('Request body is empty');
        }
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è SPOT —Å–∏–≥–Ω–∞–ª—ñ–≤
     */
    _validateDatabaseConnection(req) {
        if (!req.app.locals.db) {
            console.error('‚ùå Database connection is not initialized');
            throw new Error('Database not available');
        }
    }

    /**
     * –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è FUTURES
     * –ù–∞ –¥–∞–Ω–æ–º—É –µ—Ç–∞–ø—ñ - –ø–æ—Ä–æ–∂–Ω—è, –∑–∞–ª–∏—à–µ–Ω–∞ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å
     */
    _validateFuturesRequirements(req) {
        // –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –≤–∏–º–æ–≥ –¥–ª—è futures
        // –ú–µ—Ç–æ–¥ –∑–∞–ª–∏—à–µ–Ω–∏–π –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
    }

    /**
     * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É
     */
    _sendResponse(res, result) {
        res.json({
            success: result.success,
            status: result.success ? 'ok' : 'error',
            message: result.message,
            data: result.data
        });
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     */
    async _handleError(res, error, req) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É:', error.message);

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        try {
            await this.loggingService.logError(
                'tradingview_webhook_error',
                error.message,
                {
                    stack: error.stack,
                    request: {
                        method: req.method,
                        url: req.url,
                        body: req.body,
                        query: req.query,
                        ip: req.ip
                    },
                    timestamp: getCurrentISODate()
                }
            );
        } catch (logError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è:', logError.message);
        }

        res.status(400).json({
            success: false,
            status: 'error',
            error: error.message
        });
    }
}

module.exports = TradingViewController;