// controllers/exchange.controller.js

class ExchangeController {
    constructor(services) {
        this.exchangeService = services.exchange;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –±—ñ—Ä–∂—ñ
     */
    async startExchange(req, res) {
        try {
            const { exchange } = req.params;

            await this.exchangeService.testConnection(exchange);
            console.log(`‚úÖ ${exchange} –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);

            res.json({
                success: true,
                message: `${exchange} –∑–∞–ø—É—â–µ–Ω–æ`
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –±—ñ—Ä–∂—ñ
     */
    stopExchange(req, res) {
        try {
            const { exchange } = req.params;

            this.exchangeService.disableExchange(exchange);
            console.log(`üõë ${exchange} –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);

            res.json({
                success: true,
                message: `${exchange} –∑—É–ø–∏–Ω–µ–Ω–æ`
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–∫–∞
     */
    async emergencyStop(req, res) {
        try {
            console.log('üö® –ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å');

            const { exchange } = req.params;

            if (exchange) {
                await this.exchangeService.emergencyStop(exchange);
            } else {
                await this.exchangeService.emergencyStopAll();
            }

            res.json({
                success: true,
                message: '–ï–∫—Å—Ç—Ä–µ–Ω—É –∑—É–ø–∏–Ω–∫—É –≤–∏–∫–æ–Ω–∞–Ω–æ'
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –±—ñ—Ä–∂
     */
    getStatus(req, res) {
        try {
            const { exchange } = req.params;
            const connectedExchanges = this.exchangeService.getConnectionStatus(exchange);

            res.json({
                success: true,
                connectedExchanges,
                activeOrders: [] // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤
     */
    async getBalances(req, res) {
        try {
            const { exchange, ticker } = req.params;

            let balances;
            if (exchange) {
                balances = { [exchange]: await this.exchangeService.getBalances(exchange, ticker) };
            } else {
                balances = await this.exchangeService.getAllBalances(ticker);
            }

            res.json({
                success: true,
                balances
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
     */
    async enableExchange(req, res) {
        try {
            const { exchange } = req.params;
            const result = await this.exchangeService.enableExchange(exchange);

            res.json({
                success: true,
                message: `–ë—ñ—Ä–∂–∞ ${exchange} —É–≤—ñ–º–∫–Ω–µ–Ω–∞`
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –í–∏–º–∫–Ω–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
     */
    disableExchange(req, res) {
        try {
            const { exchange } = req.params;
            this.exchangeService.disableExchange(exchange);

            res.json({
                success: true,
                message: `–ë—ñ—Ä–∂–∞ ${exchange} –≤–∏–º–∫–Ω–µ–Ω–∞`
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
     */
    async getTradingPairs(req, res) {
        try {
            const { exchange } = req.params;
            const pairs = await this.exchangeService.getTradingPairs(exchange);

            res.json({
                success: true,
                pairs
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API
     */
    async testConnection(req, res) {
        try {
            const { exchange } = req.params || 'whitebit';
            console.log(`üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${exchange} API...`);

            // –¢–µ—Å—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API
            await this.exchangeService.getTickers(exchange);
            console.log('‚úÖ –ü—É–±–ª—ñ—á–Ω–µ API –ø—Ä–∞—Ü—é—î');

            // –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
            await this.exchangeService.getBalances(exchange);
            console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–µ API –ø—Ä–∞—Ü—é—î');

            res.json({
                success: true,
                message: '–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ',
                tests: {
                    public: 'OK',
                    private: 'OK'
                }
            });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
            res.status(500).json({
                success: false,
                error: error.message,
                tests: {
                    public: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏',
                    private: '–ü–æ–º–∏–ª–∫–∞'
                }
            });
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ä—ñ–≤
     */
    async getTickers(req, res) {
        try {
            const { exchange, market } = req.params;
            const tickers = await this.exchangeService.getTickers(exchange, market);

            res.json({
                success: true,
                tickers
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
}

module.exports = ExchangeController;


