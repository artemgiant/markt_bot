// strategies/spot-strategies.js
class SpotStrategies {
    constructor(whitebit, riskManager) {
        this.whitebit = whitebit;
        this.riskManager = riskManager;
        this.dcaOrders = new Map();
        this.gridOrders = new Map();
    }

    // DCA (Dollar Cost Averaging) —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
    async executeDCAStrategy(market, baseAmount, priceDropPercent = 5) {
        try {
            const ticker = await this.whitebit.getTickers(market);
            const currentPrice = parseFloat(ticker[market].last);

            const dcaKey = `dca_${market}`;
            const lastOrder = this.dcaOrders.get(dcaKey);

            if (!lastOrder || this.shouldTriggerDCA(currentPrice, lastOrder.price, priceDropPercent)) {
                // –ö—É–ø—É—î–º–æ –Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É —Å—É–º—É
                const order = await this.whitebit.buyMarketByQuote(market, baseAmount);

                this.dcaOrders.set(dcaKey, {
                    price: currentPrice,
                    amount: baseAmount,
                    timestamp: Date.now(),
                    orderId: order.orderId
                });

                console.log(`üí∞ DCA: –ö—É–ø—ñ–≤–ª—è ${market} –Ω–∞ —Å—É–º—É ${baseAmount} USDT –∑–∞ —Ü—ñ–Ω–æ—é ${currentPrice}`);
                return order;
            }
        } catch (error) {
            console.error(`DCA –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${market}:`, error.message);
        }
    }

    shouldTriggerDCA(currentPrice, lastPrice, dropPercent) {
        if (!lastPrice) return true;

        const priceChange = ((currentPrice - lastPrice) / lastPrice) * 100;
        return priceChange <= -dropPercent;
    }

    // Grid Trading —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
    async executeGridStrategy(market, gridLevels = 5, gridSpacing = 2) {
        try {
            const ticker = await this.whitebit.getTickers(market);
            const currentPrice = parseFloat(ticker[market].last);

            const gridKey = `grid_${market}`;

            if (!this.gridOrders.has(gridKey)) {
                await this.createGridOrders(market, currentPrice, gridLevels, gridSpacing);
            } else {
                await this.manageGridOrders(market, currentPrice);
            }
        } catch (error) {
            console.error(`Grid –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${market}:`, error.message);
        }
    }

    async createGridOrders(market, centerPrice, levels, spacing) {
        const orders = [];
        const gridSize = centerPrice * (spacing / 100);

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ –æ—Ä–¥–µ—Ä—ñ–≤
        for (let i = 1; i <= levels; i++) {
            const buyPrice = centerPrice - (gridSize * i);
            const sellPrice = centerPrice + (gridSize * i);

            // Buy orders
            try {
                const buyOrder = await this.whitebit.createLimitOrder(
                    market, 'buy', '0.001', buyPrice
                );
                orders.push({ type: 'buy', price: buyPrice, orderId: buyOrder.orderId });
            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è buy –æ—Ä–¥–µ—Ä–∞:`, error.message);
            }

            // Sell orders
            try {
                const sellOrder = await this.whitebit.createLimitOrder(
                    market, 'sell', '0.001', sellPrice
                );
                orders.push({ type: 'sell', price: sellPrice, orderId: sellOrder.orderId });
            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è sell –æ—Ä–¥–µ—Ä–∞:`, error.message);
            }
        }

        this.gridOrders.set(`grid_${market}`, {
            centerPrice,
            orders,
            levels,
            spacing,
            timestamp: Date.now()
        });

        console.log(`üî∑ Grid —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è ${market}: ${orders.length} –æ—Ä–¥–µ—Ä—ñ–≤`);
    }

    async manageGridOrders(market, currentPrice) {
        const gridData = this.gridOrders.get(`grid_${market}`);
        if (!gridData) return;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏ —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ
        const activeOrders = await this.whitebit.getActiveOrders(market);
        const activeOrderIds = new Set(activeOrders.records.map(o => o.id));

        for (const order of gridData.orders) {
            if (!activeOrderIds.has(order.orderId)) {
                // –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ–π —Å—Ç–æ—Ä–æ–Ω—ñ
                console.log(`‚úÖ Grid –æ—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: ${order.type} –∑–∞ ${order.price}`);
                await this.recreateGridOrder(market, order, currentPrice, gridData);
            }
        }
    }

    async recreateGridOrder(market, executedOrder, currentPrice, gridData) {
        try {
            const gridSize = gridData.centerPrice * (gridData.spacing / 100);

            if (executedOrder.type === 'buy') {
                // –°—Ç–≤–æ—Ä—é—î–º–æ sell –æ—Ä–¥–µ—Ä –≤–∏—â–µ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
                const sellPrice = currentPrice + gridSize;
                const newOrder = await this.whitebit.createLimitOrder(
                    market, 'sell', '0.001', sellPrice
                );

                // –û–Ω–æ–≤–ª—é—î–º–æ –º–∞—Å–∏–≤ –æ—Ä–¥–µ—Ä—ñ–≤
                const orderIndex = gridData.orders.findIndex(o => o.orderId === executedOrder.orderId);
                gridData.orders[orderIndex] = {
                    type: 'sell',
                    price: sellPrice,
                    orderId: newOrder.orderId
                };
            } else {
                // –°—Ç–≤–æ—Ä—é—î–º–æ buy –æ—Ä–¥–µ—Ä –Ω–∏–∂—á–µ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
                const buyPrice = currentPrice - gridSize;
                const newOrder = await this.whitebit.createLimitOrder(
                    market, 'buy', '0.001', buyPrice
                );

                const orderIndex = gridData.orders.findIndex(o => o.orderId === executedOrder.orderId);
                gridData.orders[orderIndex] = {
                    type: 'buy',
                    price: buyPrice,
                    orderId: newOrder.orderId
                };
            }
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è grid –æ—Ä–¥–µ—Ä–∞:`, error.message);
        }
    }
}

module.exports = SpotStrategies;
