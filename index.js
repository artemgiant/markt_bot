// index.js - –ó –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç—ñ–ª—å–∫–∏ WhiteBit
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { parseArgs } = require('node:util');

const WhiteBitConnector = require('./connectors/whitebit');
const RiskManager = require('./engine/risk');
const WebSocketManager = require('./websocket/manager');

class CryptoSpotBot {
    constructor(options = {}) {
        this.app = express();
        this.enabledExchanges = ['whitebit']; // –¢—ñ–ª—å–∫–∏ WhiteBit
        this.exchanges = {};

        console.log(`üéØ –ó–∞–ø—É—Å–∫ –∑ –±—ñ—Ä–∂–µ—é: WhiteBit`);

        this.setupMiddleware();
        this.setupConnectors();
        this.setupEngine();
        this.setupRoutes();
        this.isRunning = false;
    }

    setupConnectors() {
        console.log('üîå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WhiteBit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞...');

        this.exchanges.whitebit = new WhiteBitConnector({
            apiKey: process.env.WHITEBIT_API_KEY,
            secretKey: process.env.WHITEBIT_SECRET_KEY
        });
        console.log('‚úÖ WhiteBit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    setupMiddleware() {
        this.app.use(cors());
        this.app.use(express.json());
        this.app.use(express.static('public'));
    }

    setupEngine() {
        this.riskManager = new RiskManager({
            maxPositionSize: parseFloat(process.env.MAX_POSITION_SIZE) || 1000,
            riskPercentage: parseFloat(process.env.RISK_PERCENTAGE) || 2
        });

        this.wsManager = new WebSocketManager({
            exchanges: this.exchanges
        });
    }

    setupRoutes() {
        // –ó–∞–ø—É—Å–∫ WhiteBit
        this.app.post('/api/exchanges/whitebit/start', async (req, res) => {
            try {
                await this.exchanges.whitebit.testConnection();
                console.log(`‚úÖ WhiteBit –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);

                res.json({
                    success: true,
                    message: 'WhiteBit –∑–∞–ø—É—â–µ–Ω–æ'
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –ó—É–ø–∏–Ω–∫–∞ WhiteBit
        this.app.post('/api/exchanges/whitebit/stop', async (req, res) => {
            try {
                if (this.exchanges.whitebit.disconnect) {
                    this.exchanges.whitebit.disconnect();
                }

                console.log(`üõë WhiteBit –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);

                res.json({
                    success: true,
                    message: 'WhiteBit –∑—É–ø–∏–Ω–µ–Ω–æ'
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–∫–∞
        this.app.post('/api/emergency-stop', async (req, res) => {
            try {
                console.log('üö® –ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å');

                // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –Ω–∞ WhiteBit
                await this.exchanges.whitebit.cancelAllOrders();

                // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
                if (this.exchanges.whitebit.disconnect) {
                    this.exchanges.whitebit.disconnect();
                }

                res.json({
                    success: true,
                    message: '–ï–∫—Å—Ç—Ä–µ–Ω—É –∑—É–ø–∏–Ω–∫—É –≤–∏–∫–æ–Ω–∞–Ω–æ'
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –°—Ç–∞—Ç—É—Å –±—ñ—Ä–∂—ñ
        this.app.get('/api/status', (req, res) => {
            const connectedExchanges = {
                whitebit: this.exchanges.whitebit.isConnected()
            };

            res.json({
                isRunning: this.isRunning,
                enabledExchanges: this.enabledExchanges,
                connectedExchanges,
                activeOrders: [] // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
            });
        });

        // –ë–∞–ª–∞–Ω—Å–∏
        this.app.get('/api/balances', async (req, res) => {
            try {
                const balances = {};

                try {
                    balances.whitebit = await this.exchanges.whitebit.getSpotBalance();
                } catch (error) {
                    balances.whitebit = { error: error.message };
                }

                res.json(balances);
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è WhiteBit
        this.app.post('/api/exchange/whitebit/enable', async (req, res) => {
            try {
                await this.exchanges.whitebit.testConnection();
                console.log(`‚úÖ –ë—ñ—Ä–∂–∞ WhiteBit —É–≤—ñ–º–∫–Ω–µ–Ω–∞`);

                res.json({ success: true, message: '–ë—ñ—Ä–∂–∞ WhiteBit —É–≤—ñ–º–∫–Ω–µ–Ω–∞' });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // –í–∏–º–∫–Ω–µ–Ω–Ω—è WhiteBit
        this.app.post('/api/exchange/whitebit/disable', (req, res) => {
            if (this.exchanges.whitebit.disconnect) {
                this.exchanges.whitebit.disconnect();
            }

            console.log(`üî¥ –ë—ñ—Ä–∂–∞ WhiteBit –≤–∏–º–∫–Ω–µ–Ω–∞`);
            res.json({ success: true, message: '–ë—ñ—Ä–∂–∞ WhiteBit –≤–∏–º–∫–Ω–µ–Ω–∞' });
        });

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
        this.app.get('/api/trading-pairs', async (req, res) => {
            try {
                const pairs = await this.exchanges.whitebit.getTradingPairs();
                res.json({ success: true, pairs });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.app.get('/api/test-connection', async (req, res) => {
            try {
                console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit API...');

                // –¢–µ—Å—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API
                const publicTest = await this.exchanges.whitebit.getTickers();
                console.log('‚úÖ –ü—É–±–ª—ñ—á–Ω–µ API –ø—Ä–∞—Ü—é—î');

                // –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
                const privateTest = await this.exchanges.whitebit.getSpotBalance();
                console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–µ API –ø—Ä–∞—Ü—é—î');

                res.json({
                    success: true,
                    message: '–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ',
                    tests: {
                        public: 'OK',
                        private: 'OK'
                    }
                });
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message,
                    tests: {
                        public: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏',
                        private: '–ü–æ–º–∏–ª–∫–∞'
                    }
                });
            }
        });
        this.app.get('/api/tickers/:market?', async (req, res) => {
            try {
                const { market } = req.params;
                const tickers = await this.exchanges.whitebit.getTickers(market);
                res.json({ success: true, tickers });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        this.app.post('/api/order', async (req, res) => {
            try {
                const { market, side, amount, price, type = 'limit' } = req.body;

                let order;
                if (type === 'market') {
                    order = await this.exchanges.whitebit.createMarketOrder(market, side, amount);
                } else {
                    order = await this.exchanges.whitebit.createLimitOrder(market, side, amount, price);
                }

                res.json({ success: true, order });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        this.app.post('/api/cancel-order', async (req, res) => {
            try {
                const { market, orderId } = req.body;
                const result = await this.exchanges.whitebit.cancelOrder(market, orderId);
                res.json({ success: true, result });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏
        this.app.get('/api/active-orders/:market?', async (req, res) => {
            try {
                const { market } = req.params;
                const orders = await this.exchanges.whitebit.getActiveOrders(market);
                res.json({ success: true, orders });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });
    }

    async start() {
        if (this.isRunning) {
            throw new Error('‚ö† –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∑ WhiteBit`);

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit
        try {
            await this.exchanges.whitebit.testConnection();
            console.log(`‚úÖ WhiteBit –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
        } catch (error) {
            console.error(`‚ö† WhiteBit –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            throw error;
        }

        // –ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (this.wsManager) {
            await this.wsManager.start();
        }

        this.isRunning = true;
        console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ WhiteBit`);
    }

    async stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è –ë–æ—Ç –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ');
            return;
        }

        console.log('üõë –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤
        try {
            await this.exchanges.whitebit.cancelAllOrders();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤:', error.message);
        }

        // –ó—É–ø–∏–Ω–∫–∞ WebSocket
        if (this.wsManager) {
            await this.wsManager.stop();
        }

        // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
        if (this.exchanges.whitebit.disconnect) {
            this.exchanges.whitebit.disconnect();
        }

        this.isRunning = false;
        console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
    }

    listen() {
        const port = process.env.PORT || 3000;
        this.app.listen(port, () => {
            console.log(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        });
    }
}

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞
if (require.main === module) {
    try {
        const bot = new CryptoSpotBot();
        bot.listen();

        // –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
        process.on('SIGTERM', async () => {
            console.log('üî® SIGTERM –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
            await bot.stop();
            process.exit(0);
        });

        process.on('SIGINT', async () => {
            console.log('üî® SIGINT –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
            await bot.stop();
            process.exit(0);
        });

    } catch (error) {
        console.error('‚ö† –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error.message);
        process.exit(1);
    }
}

module.exports = CryptoSpotBot;