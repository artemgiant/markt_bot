// index.js - –ó –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç—ñ–ª—å–∫–∏ WhiteBit
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { parseArgs } = require('node:util');
const fs = require('fs');
const path = require('path');

const WhiteBitConnector = require('./connectors/whitebit');
const TradingViewConnector = require('./connectors/trading_view');
const RiskManager = require('./engine/risk');
const WebSocketManager = require('./websocket/manager');
const url = require("url");

const monitoring = require('./connectors/monitoring');
const monitoringRoutes = require('./routes/monitoring');
const settingsRoutes = require('./routes/settings');
const database = require('./config/database');
class CryptoSpotBot {
    constructor(options = {}) {
        this.app = express();
        this.enabledExchanges = ['whitebit']; // –¢—ñ–ª—å–∫–∏ WhiteBit
        this.exchanges = {};
        this.db = null;

        console.log(`üéØ –ó–∞–ø—É—Å–∫ –∑ –±—ñ—Ä–∂–µ—é: WhiteBit`);

        this.setupMiddleware();
        this.setupConnectors();
        this.setupEngine();
        this.setupRoutes();
        this.isRunning = false;
    }
    async init() {
        try {
            // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
            this.db = await database.connect();
            console.log('‚úÖ CryptoSpotBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return this;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞:', error);
            throw error;
        }
    }

    setupConnectors() {
        console.log('üîå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è WhiteBit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞...');

        this.exchanges.whitebit = new WhiteBitConnector({
            apiKey: process.env.WHITEBIT_API_KEY,
            secretKey: process.env.WHITEBIT_SECRET_KEY
        });


        console.log('‚úÖ WhiteBit –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    setupMiddleware() {
        this.app.use(cors());
        this.app.use(express.json());

        this.app.use('/api/trading_view', express.text({ type: 'text/plain' }));
        this.app.use(monitoring.middleware());

        this.app.use('/settings', settingsRoutes);
        // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        this.app.use('/monitoring/assets', express.static(path.join(__dirname, 'public/monitoring')));
        this.app.use('/settings/assets', express.static(path.join(__dirname, 'public/settings')));

// –†–æ—É—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        this.app.use('/monitoring', monitoringRoutes);
        this.app.use('/settings', settingsRoutes);
        // Middleware –¥–ª—è –æ–±—Ö–æ–¥—É ngrok warning page
        this.app.use((req, res, next) => {
            // –î–ª—è –æ–±—Ö–æ–¥—É ngrok warning page
            res.setHeader('ngrok-skip-browser-warning', 'true');
            next();
        });

        this.app.use(express.static('public'));


    }

    setupEngine() {
        this.riskManager = new RiskManager({
            maxPositionSize: parseFloat(process.env.MAX_POSITION_SIZE) || 1000,
            riskPercentage: parseFloat(process.env.RISK_PERCENTAGE) || 2
        });

        this.wsManager = new WebSocketManager({
            exchanges: this.exchanges
        });
    }

    setupRoutes() {
        // –ó–∞–ø—É—Å–∫ WhiteBit



        this.app.post('/api/exchanges/whitebit/start', async (req, res) => {
            try {
                await this.exchanges.whitebit.testConnection();
                console.log(`‚úÖ WhiteBit –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);
                res.json({
                    success: true,
                    message: 'WhiteBit –∑–∞–ø—É—â–µ–Ω–æ'
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –ó—É–ø–∏–Ω–∫–∞ WhiteBit
        this.app.post('/api/exchanges/whitebit/stop', async (req, res) => {
            try {
                if (this.exchanges.whitebit.disconnect) {
                    this.exchanges.whitebit.disconnect();
                }

                console.log(`üõë WhiteBit –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);

                res.json({
                    success: true,
                    message: 'WhiteBit –∑—É–ø–∏–Ω–µ–Ω–æ'
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–∫–∞
        this.app.post('/api/emergency-stop', async (req, res) => {
            try {
                console.log('üö® –ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å');

                // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –Ω–∞ WhiteBit
                await this.exchanges.whitebit.cancelAllOrders();

                // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
                if (this.exchanges.whitebit.disconnect) {
                    this.exchanges.whitebit.disconnect();
                }

                res.json({
                    success: true,
                    message: '–ï–∫—Å—Ç—Ä–µ–Ω—É –∑—É–ø–∏–Ω–∫—É –≤–∏–∫–æ–Ω–∞–Ω–æ'
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –°—Ç–∞—Ç—É—Å –±—ñ—Ä–∂—ñ
        this.app.get('/api/status', (req, res) => {
            const connectedExchanges = {
                whitebit: this.exchanges.whitebit.isConnected()
            };

            res.json({
                isRunning: this.isRunning,
                enabledExchanges: this.enabledExchanges,
                connectedExchanges,
                activeOrders: [] // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
            });
        });

        this.app.all('/api/trading_view', async (req, res) => {
            try {
                console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ TradingView');
                console.log('Method:', req.method);
                console.log('Body:', req.body);
                console.log('Query:', req.query);



                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
                if (!this.db) {
                    console.error('‚ùå Database connection is not initialized');
                    return res.status(500).json({
                        success: false,
                        error: 'Database not available'
                    });
                }

                // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
                const logData = TradingViewConnector.formatLogEntry(req, {
                    route: '/api/trading_view',
                    type: 'trading_view_request'
                });

                // –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª—É
                const parsedSignal = TradingViewConnector.parseSignalSpot(req.body);
                console.log('üìà –ü–∞—Ä—Å–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª:', parsedSignal);

                // –°—É–º–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
                const amount = 6;

                // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±—ñ—Ä–∂—ñ
                let order = null;
                let orderError = null;

                try {
                    order = await this.exchanges.whitebit.createMarketOrder(
                        parsedSignal.coinCode,
                        parsedSignal.action,
                        amount
                    );


                    // order  = {
                    //     orderId: 1797091915534,
                    //     clientOrderId: "",
                    //     market: "SOL_USDT",
                    //     side: "buy",
                    //     type: "market",
                    //     timestamp: 1760194851.123597,
                    //     dealMoney: "5.99169621",
                    //     dealStock: "0.0327",
                    //     amount: "6",
                    //     left: "0.00830379",
                    //     dealFee: "0.0000327",
                    //     ioc: false,
                    //     status: "PARTIALLY_FILLED",
                    //     postOnly: false,
                    //     stp: "no"
                    // };


                    console.log('‚úÖ –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:', order);
                } catch (orderErr) {
                    orderError = orderErr.message;
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞:', orderErr.message);
                }

                // 1. –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –£ –§–ê–ô–õ (—Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥)
                const logsDir = path.join(__dirname, 'logs');
                if (!fs.existsSync(logsDir)) {
                    fs.mkdirSync(logsDir, { recursive: true });
                }

                const today = new Date().toISOString().split('T')[0];
                const logFileName = `trading_view_logs_${today}.json`;
                const logFilePath = path.join(logsDir, logFileName);

                fs.appendFileSync(logFilePath, logData);
                console.log('‚úÖ –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ —É —Ñ–∞–π–ª:', logFileName);

                // 2. –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –í –ë–ê–ó–£ –î–ê–ù–ò–• (–Ω–æ–≤–∏–π –º–µ—Ç–æ–¥)
                try {
                    // –ó–∞–ø–∏—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                    const requestLog = await this.db.query(`
                INSERT INTO system_logs (level, category, message, details, type, created_at)
                VALUES ($1, $2, $3, $4, $5, NOW())
                RETURNING id, created_at
            `, [
                        'info',
                        'trading_view',
                        `TradingView ${parsedSignal.action} signal for ${parsedSignal.coinCode}`,
                        JSON.stringify({
                            signal: parsedSignal,
                            order: order,
                            orderError: orderError,
                            amount: amount,
                            request: {
                                method: req.method,
                                url: req.url,
                                body: req.body,
                                query: req.query,
                                ip: req.ip,
                                headers: {
                                    'content-type': req.headers['content-type'],
                                    'user-agent': req.headers['user-agent']
                                }
                            },
                            timestamp: new Date().toISOString()
                        }),
                        'trading_view_request'
                    ]);


                    console.log('‚úÖ –ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î');
                    console.log('üìù ID –∑–∞–ø–∏—Å—É:', requestLog.rows[0].id);

                    const result = await insertTradeHistory(parsedSignal, order,this.db);

                    console.log('Trade saved with ID:', result.id);

                    // –û–∫—Ä–µ–º–∏–π –∑–∞–ø–∏—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
                    await this.db.query(`
                INSERT INTO system_logs (level, category, message, details, type, created_at)
                VALUES ($1, $2, $3, $4, $5, NOW())
            `, [
                        orderError ? 'error' : 'info',
                        'trading_signal',
                        `${parsedSignal.action} ${parsedSignal.coinCode} - ${order ? 'Success' : 'Failed'}`,
                        JSON.stringify({
                            signal: parsedSignal,
                            order: order,
                            error: orderError,
                            amount: amount,
                            success: !!order
                        }),
                        'trading_signal'
                    ]);

                    console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î');

                } catch (dbError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î:', dbError);
                    // –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –ë–î –Ω–µ –ø—Ä–∞—Ü—é—î
                }


                // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
                res.json({
                    success: true,
                    status: 'success',
                    message: order ? 'Order created and logged successfully' : 'Signal received but order failed',
                    timestamp: new Date().toISOString(),
                    data: {
                        signal: parsedSignal,
                        order: order,
                        error: orderError,
                        logged: {
                            file: true,
                            database: true
                        }
                    }
                });

            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É:', error);
                console.error('Stack trace:', error.stack);

                // –°–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤ –ë–î
                try {
                    if (this.db) {
                        await this.db.query(`
                            INSERT INTO system_logs (level, category, message, details, type, created_at)
                            VALUES ($1, $2, $3, $4, $5, NOW())
                        `, [
                            'error',
                            'trading_view_error',
                            'Critical error processing TradingView webhook',
                            JSON.stringify({
                                error: error.message,
                                stack: error.stack,
                                request: {
                                    method: req.method,
                                    url: req.url,
                                    body: req.body
                                },
                                timestamp: new Date().toISOString()
                            }),
                            'error'
                        ]);
                    }
                } catch (dbError) {
                    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤ –ë–î:', dbError.message);
                }

                // –¢–∞–∫–æ–∂ –ª–æ–≥—É—î–º–æ —É —Ñ–∞–π–ª
                try {
                    const logsDir = path.join(__dirname, 'logs');
                    const today = new Date().toISOString().split('T')[0];
                    const errorLogPath = path.join(logsDir, `errors_${today}.json`);

                    fs.appendFileSync(errorLogPath, JSON.stringify({
                        timestamp: new Date().toISOString(),
                        error: error.message,
                        stack: error.stack,
                        request: {
                            method: req.method,
                            url: req.url,
                            body: req.body
                        }
                    }) + '\n');
                } catch (fileError) {
                    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —É —Ñ–∞–π–ª:', fileError.message);
                }

                res.status(500).json({
                    success: false,
                    status: 'error',
                    message: 'Failed to process request',
                    error: error.message,
                    timestamp: new Date().toISOString()
                });
            }
        });

        async function insertTradeHistory(parsedSignal, order,db) {
            // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –Ω–∞ –±–∞–∑–æ–≤—É —Ç–∞ –∫–æ—Ç–∏—Ä–æ–≤–∞–Ω—É –≤–∞–ª—é—Ç—É
            const [baseCurrency, quoteCurrency] = order.market.split('_');

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É –∑ WhiteBIT —Ñ–æ—Ä–º–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î
            const statusMap = {
                'PARTIALLY_FILLED': 'partially_filled',
                'FILLED': 'filled',
                'NEW': 'new',
                'CANCELLED': 'cancelled'
            };

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è timestamp –∑ Unix –≤ PostgreSQL timestamp
            const executedAt = new Date(order.timestamp * 1000);

            const query = {
                text: `INSERT INTO public.trade_history (
            exchange, order_id, client_order_id, symbol, 
            base_currency, quote_currency, side, order_type, status,
            amount, deal_stock, deal_money, deal_fee, fee, fee_currency,
            left_amount, ioc, post_only, stp, api_timestamp,
            signal_action, signal_bot_name, signal_timeframe, 
            signal_hash, original_signal, executed_at
        ) VALUES (
            $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
            $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
            $21, $22, $23, $24, $25, $26
        ) RETURNING id`,
                values: [
                    parsedSignal.exchange,
                    order.orderId.toString(),
                    order.clientOrderId || null,
                    order.market,
                    baseCurrency,
                    quoteCurrency,
                    order.side,
                    order.type,
                    statusMap[order.status] || order.status.toLowerCase(),
                    parseFloat(order.amount),
                    parseFloat(order.dealStock),
                    parseFloat(order.dealMoney),
                    parseFloat(order.dealFee),
                    parseFloat(order.dealFee),
                    baseCurrency, // fee_currency - –∑–∞–∑–≤–∏—á–∞–π –≤ –±–∞–∑–æ–≤—ñ–π –≤–∞–ª—é—Ç—ñ –¥–ª—è buy
                    parseFloat(order.left),
                    order.ioc,
                    order.postOnly,
                    order.stp,
                    order.timestamp,
                    parsedSignal.action,
                    parsedSignal.botName,
                    parsedSignal.timeframe,
                    parsedSignal.hash,
                    parsedSignal.originalSignal,
                    executedAt
                ]
            };

            try {
                const result = await db.query(query);
                console.log('Trade inserted with ID:', result.rows[0].id);
                return result.rows[0];
            } catch (error) {
                console.error('Error inserting trade:', error);
                throw error;
            }
        }


        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ª–æ–≥—ñ–≤ –∑ –ë–î
        this.app.get('/api/logs/recent', async (req, res) => {
            try {
                const limit = parseInt(req.query.limit) || 50;
                const type = req.query.type; // —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É

                let query = `
            SELECT id, level, category, message, type, created_at
            FROM system_logs
            ${type ? 'WHERE type = $1' : ''}
            ORDER BY created_at DESC
            LIMIT ${type ? '$2' : '$1'}
        `;

                const params = type ? [type, limit] : [limit];
                const result = await this.db.query(query, params);

                res.json({
                    success: true,
                    count: result.rows.length,
                    logs: result.rows
                });
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

// –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–¥–∏–Ω –ª–æ–≥
        this.app.get('/api/logs/:id', async (req, res) => {
            try {
                const { id } = req.params;
                const result = await this.db.query(`
            SELECT *
            FROM system_logs
            WHERE id = $1
        `, [id]);

                if (result.rows.length === 0) {
                    return res.status(404).json({
                        success: false,
                        error: 'Log not found'
                    });
                }

                res.json({
                    success: true,
                    log: result.rows[0]
                });
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—É:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
// –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–¥–∏–Ω –ª–æ–≥
        this.app.get('/api/logs/:id', async (req, res) => {
            try {
                const { id } = req.params;
                const result = await this.db.query(`
            SELECT *
            FROM system_logs
            WHERE id = $1
        `, [id]);

                if (result.rows.length === 0) {
                    return res.status(404).json({
                        success: false,
                        error: 'Log not found'
                    });
                }

                res.json({
                    success: true,
                    log: result.rows[0]
                });
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—É:', error);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –ë–∞–ª–∞–Ω—Å–∏
        this.app.get('/api/balances/:ticker?', async (req, res) => {
            try {
                const balances = {};
                let filtered = {};
                try {
                    balances.whitebit = await this.exchanges.whitebit.getSpotBalance( req.params.ticker);
                    const excludeCoins = ['DUSDT', 'DBTC']; // –º–æ–Ω–µ—Ç–∏ —è–∫—ñ –ù–ï –≤–∏–≤–æ–¥–∏—Ç–∏
                    filtered = Object.entries(balances.whitebit)
                        .filter(([ticker, data]) => {

                            if (excludeCoins.includes(ticker)) {
                                return false;
                            }
                            const available = parseFloat(data.available);
                            const freeze = parseFloat(data.freeze);
                            const total = available + freeze;
                            return total > 0; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å—É–º–∞ –±—ñ–ª—å—à–µ 0
                        })
                        .map(([ticker, data]) => ({
                            ticker: ticker,
                            available: Math.floor(parseFloat(data.available) * 1000) / 1000,
                            freeze:  Math.floor(parseFloat(data.freeze) * 1000) / 1000
                        }));


                } catch (error) {
                    balances.whitebit = { error: error.message };
                }


                balances.whitebit = filtered

                res.json(balances);

            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è WhiteBit
        this.app.post('/api/exchange/whitebit/enable', async (req, res) => {
            try {
                await this.exchanges.whitebit.testConnection();
                console.log(`‚úÖ –ë—ñ—Ä–∂–∞ WhiteBit —É–≤—ñ–º–∫–Ω–µ–Ω–∞`);

                res.json({ success: true, message: '–ë—ñ—Ä–∂–∞ WhiteBit —É–≤—ñ–º–∫–Ω–µ–Ω–∞' });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // –í–∏–º–∫–Ω–µ–Ω–Ω—è WhiteBit
        this.app.post('/api/exchange/whitebit/disable', (req, res) => {
            if (this.exchanges.whitebit.disconnect) {
                this.exchanges.whitebit.disconnect();
            }

            console.log(`üî¥ –ë—ñ—Ä–∂–∞ WhiteBit –≤–∏–º–∫–Ω–µ–Ω–∞`);
            res.json({ success: true, message: '–ë—ñ—Ä–∂–∞ WhiteBit –≤–∏–º–∫–Ω–µ–Ω–∞' });
        });

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
        this.app.get('/api/trading-pairs', async (req, res) => {
            try {
                const pairs = await this.exchanges.whitebit.getTradingPairs();
                res.json({ success: true, pairs });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.app.get('/api/test-connection', async (req, res) => {
            try {
                console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit API...');

                // –¢–µ—Å—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API
                const publicTest = await this.exchanges.whitebit.getTickers();
                console.log('‚úÖ –ü—É–±–ª—ñ—á–Ω–µ API –ø—Ä–∞—Ü—é—î');

                // –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API
                const privateTest = await this.exchanges.whitebit.getSpotBalance();
                console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–µ API –ø—Ä–∞—Ü—é—î');

                res.json({
                    success: true,
                    message: '–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ',
                    tests: {
                        public: 'OK',
                        private: 'OK'
                    }
                });
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message,
                    tests: {
                        public: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏',
                        private: '–ü–æ–º–∏–ª–∫–∞'
                    }
                });
            }
        });
        this.app.get('/api/tickers/:market?', async (req, res) => {
            try {
                const { market } = req.params;
                const tickers = await this.exchanges.whitebit.getTickers(market);
                res.json({ success: true, tickers });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        this.app.post('/api/order', async (req, res) => {
            try {
                const { market, side, amount, price, type = 'limit' } = req.body;

                let order;
                if (type === 'market') {
                    order = await this.exchanges.whitebit.createMarketOrder(market, side, amount);
                } else {
                    order = await this.exchanges.whitebit.createLimitOrder(market, side, amount, price);
                }

                res.json({ success: true, order });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        this.app.post('/api/cancel-order', async (req, res) => {
            try {
                const { market, orderId } = req.body;
                const result = await this.exchanges.whitebit.cancelOrder(market, orderId);
                res.json({ success: true, result });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // –ê–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏
        this.app.get('/api/active-orders/:market?', async (req, res) => {
            try {
                const { market } = req.params;
                const orders = await this.exchanges.whitebit.getActiveOrders(market);
                res.json({ success: true, orders });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });
    }

    async start() {
        if (this.isRunning) {
            throw new Error('‚ö† –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∑ WhiteBit`);

        // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WhiteBit
        try {
            await this.exchanges.whitebit.testConnection();
            console.log(`‚úÖ WhiteBit –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
        } catch (error) {
            console.error(`‚ö† WhiteBit –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            throw error;
        }

        // –ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (this.wsManager) {
            await this.wsManager.start();
        }

        this.isRunning = true;
        console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ WhiteBit`);
    }

    async stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è –ë–æ—Ç –≤–∂–µ –∑—É–ø–∏–Ω–µ–Ω–æ');
            return;
        }

        console.log('üõë –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤
        try {
            await this.exchanges.whitebit.cancelAllOrders();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤:', error.message);
        }

        // –ó—É–ø–∏–Ω–∫–∞ WebSocket
        if (this.wsManager) {
            await this.wsManager.stop();
        }

        // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
        if (this.exchanges.whitebit.disconnect) {
            this.exchanges.whitebit.disconnect();
        }

        this.isRunning = false;
        console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
    }

    listen() {
        const port = process.env.PORT || 3000;
        this.app.listen(port, () => {
            console.log(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        });
    }
    async shutdown() {
        console.log('üõë –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...');

        try {
            // –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞ —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î
            if (this.isRunning) {
                await this.stop();
            }

            // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            if (this.db) {
                await database.disconnect();
                console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            console.log('‚úÖ Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ shutdown:', error);
            process.exit(1);
        }
    }

}

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞
// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞
if (require.main === module) {
    (async () => {
        try {
            console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...');

            // –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
            const bot = new CryptoSpotBot();

            // –í–ê–ñ–õ–ò–í–û: –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ (–ø—ñ–¥–∫–ª—é—á–∞—î–º–æ –ë–î)
            await bot.init();

            // –ü–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            bot.listen();

            // –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
            process.on('SIGTERM', async () => {
                console.log('üî® SIGTERM –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
                await bot.shutdown();
            });

            process.on('SIGINT', async () => {
                console.log('üî® SIGINT –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
                await bot.shutdown();
            });

            // –û–±—Ä–æ–±–∫–∞ –Ω–µ–∫–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
            process.on('unhandledRejection', (reason, promise) => {
                console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
            });

            process.on('uncaughtException', (error) => {
                console.error('‚ùå Uncaught Exception:', error);
                process.exit(1);
            });

        } catch (error) {
            console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error.message);
            console.error(error.stack);
            process.exit(1);
        }
    })();
}

module.exports = CryptoSpotBot;


module.exports = CryptoSpotBot;