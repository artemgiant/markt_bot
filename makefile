# –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∏–º –∑–∞–ø—É—Å–∫–æ–º –±—ñ—Ä–∂
# –í–µ—Ä—Å—ñ—è: 1.0.0

NODE := node
NPM := npm
PM2 := pm2






# –ö–æ–ª—å–æ—Ä–∏
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
RED := \033[0;31m
PURPLE := \033[0;35m
NC := \033[0m

.DEFAULT_GOAL := help

make-ssh:
	ssh root@164.92.139.111 && cd /var/www/trading-bot/ && kill -9 $(lsof -i:80 -t)

node-kill-process:
	killall node
kill-process-in-port:
	kill -9 $(lsof -i:80 -t)

.PHONY: help
help:
	@echo "$(BLUE)ü§ñ –¢–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç - –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø—É—Å–∫$(NC)"
	@echo ""
	@echo "$(PURPLE)üè≠ –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò:$(NC)"
	@echo "$(GREEN)make setup$(NC)          - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"
	@echo "$(GREEN)make dev$(NC)            - –í—Å—ñ –±—ñ—Ä–∂—ñ (—Ä–æ–∑—Ä–æ–±–∫–∞)"
	@echo "$(GREEN)make start$(NC)          - –í—Å—ñ –±—ñ—Ä–∂—ñ (–ø—Ä–æ–¥–∞–∫—à–Ω)"
	@echo ""
	@echo "$(PURPLE)üéØ –í–ò–ë–Ü–† –ë–Ü–†–ñ:$(NC)"
	@echo "$(GREEN)make binance$(NC)        - –¢—ñ–ª—å–∫–∏ Binance"
	@echo "$(GREEN)make mexc$(NC)           - –¢—ñ–ª—å–∫–∏ MEXC"
	@echo "$(GREEN)make whitebit$(NC)       - –¢—ñ–ª—å–∫–∏ WhiteBit"
	@echo "$(GREEN)make futures$(NC)        - Binance + MEXC (—Ñ—é—á–µ—Ä—Å–∏)"
	@echo "$(GREEN)make spot$(NC)           - –¢—ñ–ª—å–∫–∏ WhiteBit (—Å–ø–æ—Ç)"
	@echo ""
	@echo "$(PURPLE)üîß –†–û–ó–®–ò–†–ï–ù–Ü:$(NC)"
	@echo "$(GREEN)make custom EX=bin,mexc$(NC) - –ö–∞—Å—Ç–æ–º–Ω–∏–π –Ω–∞–±—ñ—Ä"
	@echo "$(GREEN)make test-conn$(NC)      - –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω—å"
	@echo "$(GREEN)make status$(NC)         - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—ñ–≤"
	@echo "$(GREEN)make stop$(NC)           - –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å–µ"

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò =====

.PHONY: setup
setup:
	@echo "$(BLUE)üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤...$(NC)"
	$(NPM) install
	@echo "$(BLUE)‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...$(NC)"
	@if [ ! -f .env ]; then cp .env.example .env; fi
	@mkdir -p logs
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ!$(NC)"

.PHONY: dev
dev:
	@echo "$(BLUE)üöÄ –†–æ–∑—Ä–æ–±–∫–∞ (–≤—Å—ñ –±—ñ—Ä–∂—ñ)...$(NC)"
	$(NPM) run dev

.PHONY: start
start:
	@echo "$(BLUE)üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω (–≤—Å—ñ –±—ñ—Ä–∂—ñ)...$(NC)"
	$(NODE) index.js

# ===== –û–ö–†–ï–ú–Ü –ë–Ü–†–ñ–Ü =====

.PHONY: binance
binance:
	@echo "$(YELLOW)üî∏ –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ Binance...$(NC)"
	$(NODE) index.js --exchanges binance

.PHONY: mexc
mexc:
	@echo "$(YELLOW)üî∏ –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ MEXC...$(NC)"
	$(NODE) index.js --exchanges mexc

.PHONY: whitebit
whitebit:
	@echo "$(YELLOW)üî∏ –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ WhiteBit...$(NC)"
	$(NODE) index.js --exchanges whitebit

# ===== –ö–û–ú–ë–Ü–ù–ê–¶–Ü–á –ë–Ü–†–ñ =====

.PHONY: futures
futures:
	@echo "$(PURPLE)‚ö° –§—é—á–µ—Ä—Å–Ω—ñ –±—ñ—Ä–∂—ñ (Binance + MEXC)...$(NC)"
	$(NODE) index.js --exchanges binance,mexc

.PHONY: spot
spot:
	@echo "$(PURPLE)üí∞ –°–ø–æ—Ç–æ–≤–∞ –±—ñ—Ä–∂–∞ (WhiteBit)...$(NC)"
	$(NODE) index.js --exchanges whitebit

.PHONY: custom
custom:
	@echo "$(PURPLE)üéØ –ö–∞—Å—Ç–æ–º–Ω–∏–π –Ω–∞–±—ñ—Ä: $(EX)...$(NC)"
	@if [ -z "$(EX)" ]; then \
		echo "$(RED)‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: make custom EX=binance,mexc$(NC)"; \
	else \
		$(NODE) index.js --exchanges $(EX); \
	fi

# ===== PM2 –ó–ê–ü–£–°–ö =====

.PHONY: pm2-binance
pm2-binance:
	@echo "$(BLUE)üöÄ PM2 Binance...$(NC)"
	$(PM2) start index.js --name "bot-binance" -- --exchanges binance

.PHONY: pm2-mexc
pm2-mexc:
	@echo "$(BLUE)üöÄ PM2 MEXC...$(NC)"
	$(PM2) start index.js --name "bot-mexc" -- --exchanges mexc

.PHONY: pm2-whitebit
pm2-whitebit:
	@echo "$(BLUE)üöÄ PM2 WhiteBit...$(NC)"
	$(PM2) start index.js --name "bot-whitebit" -- --exchanges whitebit

.PHONY: pm2-futures
pm2-futures:
	@echo "$(BLUE)üöÄ PM2 Futures...$(NC)"
	$(PM2) start index.js --name "bot-futures" -- --exchanges binance,mexc

.PHONY: pm2-all
pm2-all: pm2-binance pm2-mexc pm2-whitebit
	@echo "$(GREEN)‚úÖ –í—Å—ñ –±–æ—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ PM2$(NC)"

# ===== –¢–ï–°–¢–£–í–ê–ù–ù–Ø =====

.PHONY: test-conn
test-conn:
	@echo "$(BLUE)üîç –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω—å...$(NC)"
	@$(NODE) -e "
	require('dotenv').config();
	const BinanceConnector = require('./connectors/binance');
	const MEXCConnector = require('./connectors/mexc');
	const WhiteBitConnector = require('./connectors/whitebit');

	async function testAll() {
		const tests = [
			{ name: 'Binance', conn: new BinanceConnector({apiKey: process.env.BINANCE_API_KEY, secretKey: process.env.BINANCE_SECRET_KEY}) },
			{ name: 'MEXC', conn: new MEXCConnector({apiKey: process.env.MEXC_API_KEY, secretKey: process.env.MEXC_SECRET_KEY}) },
			{ name: 'WhiteBit', conn: new WhiteBitConnector({apiKey: process.env.WHITEBIT_API_KEY, secretKey: process.env.WHITEBIT_SECRET_KEY}) }
		];

		for (const test of tests) {
			try {
				await test.conn.testConnection();
				console.log('‚úÖ', test.name, 'OK');
			} catch (error) {
				console.log('‚ùå', test.name, 'FAIL:', error.message);
			}
		}
	}
	testAll();
	"

# ===== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø =====

.PHONY: status
status:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—ñ–≤...$(NC)"
	$(PM2) status

.PHONY: logs
logs:
	@echo "$(BLUE)üìã –õ–æ–≥–∏...$(NC)"
	$(PM2) logs --lines 20

.PHONY: stop
stop:
	@echo "$(BLUE)üõë –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –±–æ—Ç—ñ–≤...$(NC)"
	$(PM2) stop all || true
	pkill -f "node.*index.js" || true

.PHONY: restart
restart:
	@echo "$(BLUE)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...$(NC)"
	$(PM2) restart all

.PHONY: clean
clean:
	@echo "$(BLUE)üßπ –û—á–∏—â–µ–Ω–Ω—è...$(NC)"
	rm -rf logs/*.old node_modules/.cache
	$(PM2) delete all || true

# ===== –†–û–ó–†–û–ë–ö–ê –û–ö–†–ï–ú–ò–• –ë–Ü–†–ñ =====

.PHONY: dev-binance
dev-binance:
	@echo "$(YELLOW)üõ†Ô∏è –†–æ–∑—Ä–æ–±–∫–∞ Binance...$(NC)"
	nodemon index.js -- --exchanges binance

.PHONY: dev-mexc
dev-mexc:
	@echo "$(YELLOW)üõ†Ô∏è –†–æ–∑—Ä–æ–±–∫–∞ MEXC...$(NC)"
	nodemon index.js -- --exchanges mexc

.PHONY: dev-whitebit
dev-whitebit:
	@echo "$(YELLOW)üõ†Ô∏è –†–æ–∑—Ä–æ–±–∫–∞ WhiteBit...$(NC)"
	nodemon index.js -- --exchanges whitebit



# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_USER := root
SERVER_HOST := 164.92.139.111
SERVER_PATH := /var/www/crm-developer.pro
SSH_KEY := ~/.ssh/id_rsa
DEPLOY_SCRIPT := deploy.sh

deploy:
	@echo "–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ..."
	@ssh -i $(SSH_KEY) $(SERVER_USER)@$(SERVER_HOST) \
		'cd $(SERVER_PATH) && bash $(DEPLOY_SCRIPT)'
	@echo "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"


# –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π deploy.sh –Ω–∞ —Å–µ—Ä–≤–µ—Ä —ñ –∑–∞–ø—É—Å—Ç–∏—Ç–∏
deploy-local:
	@echo "–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è deploy.sh –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
	@scp -i $(SSH_KEY) $(DEPLOY_SCRIPT) $(SERVER_USER)@$(SERVER_HOST):$(SERVER_PATH)/
	@echo "–ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è..."
	@ssh -i $(SSH_KEY) $(SERVER_USER)@$(SERVER_HOST) \
		'chmod +x $(SERVER_PATH)/$(DEPLOY_SCRIPT)'
	@echo "–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—é..."
	@ssh -i $(SSH_KEY) $(SERVER_USER)@$(SERVER_HOST) \
		'cd $(SERVER_PATH) && ./$(DEPLOY_SCRIPT)'
	@echo "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
