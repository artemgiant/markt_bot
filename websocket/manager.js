// websocket/manager.js
const EventEmitter = require('events');

class WebSocketManager extends EventEmitter {
    constructor(config) {
        super();
        this.binance = config.binance;
        this.mexc = config.mexc;
        this.tradingEngine = config.tradingEngine;

        this.connections = new Map();
        this.reconnectAttempts = new Map();
        this.maxReconnectAttempts = parseInt(process.env.MAX_RECONNECT_ATTEMPTS) || 10;
        this.reconnectDelay = parseInt(process.env.WS_RECONNECT_DELAY) || 5000;

        this.isRunning = false;
    }

    async start() {
        if (this.isRunning) return;

        console.log('üì° –ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');

        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance WebSocket
        this.connectBinanceStreams();

        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MEXC WebSocket
        this.connectMEXCStreams();

        this.isRunning = true;
        console.log('‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ');
    }

    async stop() {
        if (!this.isRunning) return;

        console.log('üì° –ó—É–ø–∏–Ω–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞...');

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –∑'—î–¥–Ω–∞–Ω—å
        for (const [key, connection] of this.connections.entries()) {
            if (connection && connection.close) {
                connection.close();
            }
        }

        this.connections.clear();
        this.reconnectAttempts.clear();
        this.isRunning = false;

        console.log('‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
    }

    connectBinanceStreams() {
        const symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT'];

        symbols.forEach(symbol => {
            try {
                // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü—ñ–Ω–∏
                const priceStream = this.binance.subscribeToPriceStream(symbol, (data) => {
                    this.handlePriceUpdate('binance', data);
                });

                this.connections.set(`binance_price_${symbol}`, priceStream);
                console.log(`üìà –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Binance —Ü—ñ–Ω –¥–ª—è ${symbol}`);

            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance ${symbol}:`, error.message);
                this.scheduleReconnect('binance', symbol);
            }
        });
    }

    connectMEXCStreams() {
        const symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT'];

        symbols.forEach(symbol => {
            try {
                // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü—ñ–Ω–∏ MEXC
                this.mexc.subscribeToPriceStream(symbol, (data) => {
                    this.handlePriceUpdate('mexc', data);
                });

                console.log(`üìà –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MEXC —Ü—ñ–Ω –¥–ª—è ${symbol}`);

            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MEXC ${symbol}:`, error.message);
                this.scheduleReconnect('mexc', symbol);
            }
        });
    }

    handlePriceUpdate(exchange, data) {
        // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–∏—Ö –¥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        if (this.tradingEngine) {
            this.tradingEngine.handlePriceUpdate(exchange, data);
        }

        // –ï–º—ñ—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –¥–ª—è —ñ–Ω—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        this.emit('priceUpdate', {
            exchange,
            symbol: data.symbol,
            price: data.price,
            volume: data.volume,
            timestamp: Date.now()
        });

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω —Ü—ñ–Ω
        this.logSignificantPriceMovements(exchange, data);
    }

    logSignificantPriceMovements(exchange, data) {
        const key = `${exchange}_${data.symbol}`;
        const lastPrice = this.lastPrices && this.lastPrices.get(key);

        if (!this.lastPrices) {
            this.lastPrices = new Map();
        }

        if (lastPrice) {
            const changePercent = ((data.price - lastPrice) / lastPrice) * 100;

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–Ω–∏—Ö —Ä—É—Ö—ñ–≤ —Ü—ñ–Ω (–±—ñ–ª—å—à–µ 1%)
            if (Math.abs(changePercent) >= 1) {
                const direction = changePercent > 0 ? 'üìà' : 'üìâ';
                console.log(`${direction} ${exchange.toUpperCase()} ${data.symbol}: ${changePercent.toFixed(2)}% - $${data.price}`);
            }
        }

        this.lastPrices.set(key, data.price);
    }

    scheduleReconnect(exchange, symbol) {
        const key = `${exchange}_${symbol}`;
        const currentAttempts = this.reconnectAttempts.get(key) || 0;

        if (currentAttempts >= this.maxReconnectAttempts) {
            console.error(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω—É—Ç–∞ –¥–ª—è ${key}`);
            return;
        }

        const delay = this.reconnectDelay * Math.pow(2, currentAttempts); // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

        console.log(`üîÑ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ${key} —á–µ—Ä–µ–∑ ${delay}ms (—Å–ø—Ä–æ–±–∞ ${currentAttempts + 1})`);

        setTimeout(() => {
            this.reconnectAttempts.set(key, currentAttempts + 1);

            if (exchange === 'binance') {
                this.connectBinanceStreams();
            } else if (exchange === 'mexc') {
                this.connectMEXCStreams();
            }
        }, delay);
    }

    getConnectionStatus() {
        const status = {};

        for (const [key, connection] of this.connections.entries()) {
            status[key] = {
                connected: connection && connection.readyState === 1,
                reconnectAttempts: this.reconnectAttempts.get(key) || 0
            };
        }

        return status;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ WebSocket
    sendMessage(exchange, message) {
        const connection = this.connections.get(`${exchange}_main`);

        if (connection && connection.readyState === 1) {
            connection.send(JSON.stringify(message));
            return true;
        }

        console.error(`–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${exchange} –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–∏—Ö
    subscribeToStream(exchange, streamType, symbol, callback) {
        const key = `${exchange}_${streamType}_${symbol}`;

        try {
            let stream;

            if (exchange === 'binance') {
                // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ç–æ–∫–∏ Binance
                if (streamType === 'orderbook') {
                    stream = this.binance.subscribeToOrderBookStream(symbol, callback);
                } else if (streamType === 'trades') {
                    stream = this.binance.subscribeToTradesStream(symbol, callback);
                }
            } else if (exchange === 'mexc') {
                // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ç–æ–∫–∏ MEXC
                if (streamType === 'orderbook') {
                    stream = this.mexc.subscribeToOrderBookStream(symbol, callback);
                }
            }

            if (stream) {
                this.connections.set(key, stream);
                console.log(`üìä –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ ${streamType} –¥–ª—è ${symbol} –Ω–∞ ${exchange}`);
                return true;
            }

        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${key}:`, error.message);
        }

        return false;
    }
}

module.exports = WebSocketManager;
