// engine/risk.js - –ü—Ä–æ—Å—Ç–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏–∑–∏–∫—ñ–≤
class RiskManager {
    constructor(config) {
        this.maxPositionSize = config.maxPositionSize || 1000;
        this.riskPercentage = config.riskPercentage || 2;
        this.maxDailyLoss = config.maxDailyLoss || 5000;
        this.dailyLoss = 0;
        this.totalTrades = 0;
        this.successfulTrades = 0;

        // –°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –ø—ñ–≤–Ω–æ—á—ñ
        this.resetDailyStats();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ–º–æ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –æ—Ä–¥–µ—Ä
    canPlaceOrder(orderAmount, currentBalance) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
        if (orderAmount > this.maxPositionSize) {
            console.log(`‚ö†Ô∏è –†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞ (${orderAmount}) –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º—É–º (${this.maxPositionSize})`);
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –±–∞–ª–∞–Ω—Å—É
        if (orderAmount > currentBalance * 0.95) {
            console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ (${orderAmount})`);
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–±–∏—Ç–∫—ñ–≤
        if (this.dailyLoss >= this.maxDailyLoss) {
            console.log(`‚ö†Ô∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–±–∏—Ç–∫—ñ–≤ (${this.maxDailyLoss})`);
            return false;
        }

        return true;
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–∑–∏–∫—É
    calculatePositionSize(balance, entryPrice, stopLoss) {
        if (!stopLoss || stopLoss <= 0) {
            // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É
            return Math.min(balance * (this.riskPercentage / 100), this.maxPositionSize);
        }

        const riskAmount = balance * (this.riskPercentage / 100);
        const priceRisk = Math.abs(entryPrice - stopLoss) / entryPrice;
        const positionSize = riskAmount / priceRisk;

        return Math.min(positionSize, this.maxPositionSize);
    }

    // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    registerTrade(profit, loss = 0) {
        this.totalTrades++;

        if (profit > 0) {
            this.successfulTrades++;
            console.log(`‚úÖ –ü—Ä–∏–±—É—Ç–∫–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è: +${profit.toFixed(2)} USDT`);
        } else if (loss > 0) {
            this.dailyLoss += loss;
            console.log(`‚ùå –ó–±–∏—Ç–∫–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è: -${loss.toFixed(2)} USDT`);
        }

        this.logStatistics();
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
    getSuccessRate() {
        if (this.totalTrades === 0) return 0;
        return (this.successfulTrades / this.totalTrades) * 100;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º–µ–Ω—à–∏—Ç–∏ —Ä–∏–∑–∏–∫
    shouldReduceRisk() {
        const successRate = this.getSuccessRate();

        // –ó–º–µ–Ω—à—É—î–º–æ —Ä–∏–∑–∏–∫ —è–∫—â–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –Ω–∏–∂—á–µ 40%
        if (this.totalTrades >= 10 && successRate < 40) {
            return true;
        }

        // –ó–º–µ–Ω—à—É—î–º–æ —Ä–∏–∑–∏–∫ —è–∫—â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –±—ñ–ª—å—à–µ 70% –≤—ñ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–±–∏—Ç–∫—ñ–≤
        if (this.dailyLoss > this.maxDailyLoss * 0.7) {
            return true;
        }

        return false;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–∏–∑–∏–∫—É
    getRiskSettings() {
        return {
            maxPositionSize: this.maxPositionSize,
            riskPercentage: this.riskPercentage,
            maxDailyLoss: this.maxDailyLoss,
            dailyLoss: this.dailyLoss,
            remainingDailyRisk: Math.max(0, this.maxDailyLoss - this.dailyLoss),
            successRate: this.getSuccessRate(),
            totalTrades: this.totalTrades,
            shouldReduceRisk: this.shouldReduceRisk()
        };
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–∏–∑–∏–∫—É
    updateRiskSettings(newSettings) {
        if (newSettings.maxPositionSize) {
            this.maxPositionSize = newSettings.maxPositionSize;
        }
        if (newSettings.riskPercentage) {
            this.riskPercentage = Math.min(newSettings.riskPercentage, 10); // –ú–∞–∫—Å–∏–º—É–º 10%
        }
        if (newSettings.maxDailyLoss) {
            this.maxDailyLoss = newSettings.maxDailyLoss;
        }

        console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ:', this.getRiskSettings());
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    logStatistics() {
        const stats = this.getRiskSettings();
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–∑–∏–∫—ñ–≤: –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å ${stats.successRate.toFixed(1)}%, –¢–æ—Ä–≥—ñ–≤–µ–ª—å: ${stats.totalTrades}, –ó–∞–ª–∏—à–æ–∫ –ª—ñ–º—ñ—Ç—ñ–≤: ${stats.remainingDailyRisk.toFixed(2)} USDT`);
    }

    // –°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    resetDailyStats() {
        const now = new Date();
        const tomorrow = new Date(now);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 0, 0, 0);

        const millisecondsUntilMidnight = tomorrow.getTime() - now.getTime();

        // setTimeout(() => {
        //     this.dailyLoss = 0;
        //     console.log('üîÑ –©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–∏—Ç–∫—ñ–≤ —Å–∫–∏–Ω—É—Ç–∞');
        //
        //     // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–∫–∏–¥
        //     this.resetDailyStats();
        // }, millisecondsUntilMidnight);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
    checkLimits(orderAmount, currentProfit = 0) {
        const warnings = [];

        if (orderAmount > this.maxPositionSize * 0.8) {
            warnings.push('–†–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞ –±–ª–∏–∑—å–∫–∏–π –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ');
        }

        if (this.dailyLoss > this.maxDailyLoss * 0.8) {
            warnings.push('–©–æ–¥–µ–Ω–Ω—ñ –∑–±–∏—Ç–∫–∏ –±–ª–∏–∑—å–∫—ñ –¥–æ –ª—ñ–º—ñ—Ç—É');
        }

        const successRate = this.getSuccessRate();
        if (this.totalTrades >= 5 && successRate < 50) {
            warnings.push(`–ù–∏–∑—å–∫–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ç–æ—Ä–≥—ñ–≤–ª—ñ: ${successRate.toFixed(1)}%`);
        }

        return warnings;
    }
}

module.exports = RiskManager;