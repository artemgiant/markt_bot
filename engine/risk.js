// engine/risk.js
class RiskManager {
    constructor(config) {
        this.maxPositionSize = config.maxPositionSize || 1000;
        this.riskPercentage = config.riskPercentage || 2;
        this.maxDrawdown = config.maxDrawdown || 10;
        this.maxDailyLoss = config.maxDailyLoss || 5;

        this.dailyPnL = 0;
        this.totalPnL = 0;
        this.openPositions = new Map();

        // –°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.resetDailyStats();
    }

    resetDailyStats() {
        const now = new Date();
        const tomorrow = new Date(now);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 0, 0, 0);

        const timeUntilReset = tomorrow.getTime() - now.getTime();

        setTimeout(() => {
            this.dailyPnL = 0;
            console.log('üìä –©–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PnL —Å–∫–∏–Ω—É—Ç–∞');
            this.resetDailyStats();
        }, timeUntilReset);
    }

    checkPositionRisk(symbol, side, requestedQuantity) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –≤—Ç—Ä–∞—Ç
        if (this.dailyPnL <= -this.maxDailyLoss) {
            return {
                allowed: false,
                reason: `–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —â–æ–¥–µ–Ω–Ω–∏—Ö –≤—Ç—Ä–∞—Ç: ${this.maxDailyLoss}%`,
                adjustedQuantity: 0
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è
        if (this.totalPnL <= -this.maxDrawdown) {
            return {
                allowed: false,
                reason: `–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø—Ä–æ—Å—ñ–¥–∞–Ω–Ω—è: ${this.maxDrawdown}%`,
                adjustedQuantity: 0
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
        const existingPosition = this.openPositions.get(symbol);
        const currentSize = existingPosition ? existingPosition.size : 0;
        const newTotalSize = currentSize + requestedQuantity;

        if (newTotalSize > this.maxPositionSize) {
            const allowedQuantity = Math.max(0, this.maxPositionSize - currentSize);

            if (allowedQuantity === 0) {
                return {
                    allowed: false,
                    reason: `–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è ${symbol}`,
                    adjustedQuantity: 0
                };
            }

            return {
                allowed: true,
                reason: `–†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π –∑ ${requestedQuantity} –¥–æ ${allowedQuantity}`,
                adjustedQuantity: allowedQuantity
            };
        }

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–∑–∏–∫—É
        const riskAdjustedQuantity = this.calculatePositionSize(requestedQuantity);

        return {
            allowed: true,
            reason: '–ü–æ–∑–∏—Ü—ñ—è –¥–æ–∑–≤–æ–ª–µ–Ω–∞',
            adjustedQuantity: Math.min(requestedQuantity, riskAdjustedQuantity)
        };
    }

    calculatePositionSize(requestedQuantity) {
        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å–æ—Ç–∫–∞ —Ä–∏–∑–∏–∫—É
        const accountBalance = 10000; // –ü—Ä–∏–∫–ª–∞–¥ –±–∞–ª–∞–Ω—Å—É, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ –±—ñ—Ä–∂—ñ
        const riskAmount = accountBalance * (this.riskPercentage / 100);

        // –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
        const maxQuantity = riskAmount / 100; // –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É

        return Math.min(requestedQuantity, maxQuantity);
    }

    updatePosition(symbol, quantity, pnl) {
        this.openPositions.set(symbol, {
            size: quantity,
            pnl: pnl
        });

        this.updatePnL(pnl);
    }

    closePosition(symbol) {
        const position = this.openPositions.get(symbol);
        if (position) {
            this.updatePnL(position.pnl);
            this.openPositions.delete(symbol);
        }
    }

    updatePnL(pnl) {
        this.dailyPnL += pnl;
        this.totalPnL += pnl;

        console.log(`üí∞ PnL –æ–Ω–æ–≤–ª–µ–Ω–æ: –©–æ–¥–µ–Ω–Ω–∏–π: ${this.dailyPnL.toFixed(2)}%, –ó–∞–≥–∞–ª—å–Ω–∏–π: ${this.totalPnL.toFixed(2)}%`);
    }

    getExposure() {
        let totalExposure = 0;
        for (const position of this.openPositions.values()) {
            totalExposure += position.size;
        }
        return totalExposure;
    }

    getRiskMetrics() {
        return {
            dailyPnL: this.dailyPnL,
            totalPnL: this.totalPnL,
            openPositions: this.openPositions.size,
            totalExposure: this.getExposure(),
            riskUtilization: (this.getExposure() / this.maxPositionSize) * 100
        };
    }

    isTradeAllowed() {
        return this.dailyPnL > -this.maxDailyLoss && this.totalPnL > -this.maxDrawdown;
    }
}

module.exports = RiskManager;
