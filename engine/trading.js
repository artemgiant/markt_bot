// engine/trading.js
const EventEmitter = require('events');

class TradingEngine extends EventEmitter {
    constructor(config) {
        super();
        this.exchanges = config.exchanges;
        this.riskManager = config.riskManager;
        this.positions = new Map();
        this.strategies = new Map();
        this.isRunning = false;
        this.symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT'];

        this.setupStrategies();
    }

    setupStrategies() {
        // –ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Å—Ç–æ—ó RSI —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        this.strategies.set('rsi', {
            name: 'RSI Reversal',
            timeframe: '1m',
            parameters: {
                rsiPeriod: 14,
                oversold: 30,
                overbought: 70
            },
            enabled: true
        });

        // –ü—Ä–∏–∫–ª–∞–¥ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        this.strategies.set('arbitrage', {
            name: 'Cross-Exchange Arbitrage',
            parameters: {
                minSpread: 0.5, // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
                maxPositionTime: 300000 // 5 —Ö–≤–∏–ª–∏–Ω
            },
            enabled: true
        });
    }

    async start() {
        if (this.isRunning) return;

        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...');

        // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ –±—ñ—Ä–∂
        await this.loadExistingPositions();

        // –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ü—ñ–Ω
        this.startPriceMonitoring();

        // –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
        this.startStrategies();

        this.isRunning = true;
        console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ');
    }

    async stop() {
        if (!this.isRunning) return;

        console.log('üõë –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...');
        this.isRunning = false;
    }

    async loadExistingPositions() {
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ Binance
            const binancePositions = await this.exchanges.binance.getPositions();
            binancePositions.forEach(pos => {
                this.positions.set(`binance_${pos.symbol}`, {
                    exchange: 'binance',
                    symbol: pos.symbol,
                    side: parseFloat(pos.positionAmt) > 0 ? 'LONG' : 'SHORT',
                    size: Math.abs(parseFloat(pos.positionAmt)),
                    entryPrice: parseFloat(pos.entryPrice),
                    unrealizedPnl: parseFloat(pos.unRealizedProfit),
                    openTime: Date.now()
                });
            });

            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –∑ MEXC
            const mexcPositions = await this.exchanges.mexc.getPositions();
            mexcPositions.forEach(pos => {
                this.positions.set(`mexc_${pos.symbol}`, {
                    exchange: 'mexc',
                    symbol: pos.symbol,
                    side: pos.side === 1 ? 'LONG' : 'SHORT',
                    size: parseFloat(pos.positionSize),
                    entryPrice: parseFloat(pos.openAvgPrice),
                    unrealizedPnl: parseFloat(pos.unrealizedPnl),
                    openTime: pos.createTime
                });
            });

            console.log(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.positions.size} —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π`);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error.message);
        }
    }

    startPriceMonitoring() {
        this.symbols.forEach(symbol => {
            // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü—ñ–Ω–∏ –∑ Binance
            this.exchanges.binance.subscribeToPriceStream(symbol, (data) => {
                this.handlePriceUpdate('binance', data);
            });

            // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü—ñ–Ω–∏ –∑ MEXC
            this.exchanges.mexc.subscribeToPriceStream(symbol, (data) => {
                this.handlePriceUpdate('mexc', data);
            });
        });
    }

    startStrategies() {
        // –ó–∞–ø—É—Å–∫ RSI —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        if (this.strategies.get('rsi').enabled) {
            setInterval(() => {
                this.executeRSIStrategy();
            }, 60000); // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        }

        // –ó–∞–ø—É—Å–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        if (this.strategies.get('arbitrage').enabled) {
            setInterval(() => {
                this.executeArbitrageStrategy();
            }, 5000); // –ö–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
        }
    }

    handlePriceUpdate(exchange, data) {
        this.emit('priceUpdate', { exchange, ...data });

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Ü—ñ–Ω –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
        if (!this.currentPrices) this.currentPrices = {};
        if (!this.currentPrices[data.symbol]) this.currentPrices[data.symbol] = {};

        this.currentPrices[data.symbol][exchange] = data.price;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å—ñ–≤ —Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—ñ–≤
        this.checkStopLossAndTakeProfit(data.symbol, data.price);
    }

    async executeRSIStrategy() {
        // –°–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è RSI —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        for (const symbol of this.symbols) {
            try {
                const rsi = await this.calculateRSI(symbol);
                const strategy = this.strategies.get('rsi');

                if (rsi < strategy.parameters.oversold) {
                    // –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
                    await this.openPosition('binance', symbol, 'LONG', 0.001);
                } else if (rsi > strategy.parameters.overbought) {
                    // –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂
                    await this.openPosition('binance', symbol, 'SHORT', 0.001);
                }
            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ RSI —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è ${symbol}:`, error.message);
            }
        }
    }

    async executeArbitrageStrategy() {
        if (!this.currentPrices) return;

        const strategy = this.strategies.get('arbitrage');

        for (const symbol of this.symbols) {
            const prices = this.currentPrices[symbol];
            if (!prices || !prices.binance || !prices.mexc) continue;

            const spread = Math.abs(prices.binance - prices.mexc) / Math.min(prices.binance, prices.mexc) * 100;

            if (spread >= strategy.parameters.minSpread) {
                const cheapExchange = prices.binance < prices.mexc ? 'binance' : 'mexc';
                const expensiveExchange = prices.binance < prices.mexc ? 'mexc' : 'binance';

                console.log(`üí∞ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å: ${symbol} —Å–ø—Ä–µ–¥ ${spread.toFixed(2)}%`);

                // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                await this.openArbitragePosition(symbol, cheapExchange, expensiveExchange, 0.001);
            }
        }
    }

    async openPosition(exchange, symbol, side, quantity) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
            const riskCheck = this.riskManager.checkPositionRisk(symbol, side, quantity);
            if (!riskCheck.allowed) {
                console.log(`‚ùå –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: ${riskCheck.reason}`);
                return;
            }

            const adjustedQuantity = riskCheck.adjustedQuantity;
            let order;

            if (side === 'LONG') {
                order = await this.exchanges[exchange].marketBuy(symbol, adjustedQuantity);
            } else {
                order = await this.exchanges[exchange].marketSell(symbol, adjustedQuantity);
            }

            // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            const positionKey = `${exchange}_${symbol}`;
            this.positions.set(positionKey, {
                exchange,
                symbol,
                side,
                size: adjustedQuantity,
                entryPrice: order.avgPrice || order.price,
                openTime: Date.now(),
                orderId: order.orderId
            });

            // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—É —Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É
            await this.setRiskManagementOrders(exchange, symbol, side, adjustedQuantity, order.avgPrice || order.price);

            this.emit('positionOpened', { exchange, symbol, side, quantity: adjustedQuantity });

        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: ${error.message}`);
        }
    }

    async openArbitragePosition(symbol, buyExchange, sellExchange, quantity) {
        try {
            // –û–¥–Ω–æ—á–∞—Å–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –æ–±–æ—Ö –±—ñ—Ä–∂–∞—Ö
            const [buyOrder, sellOrder] = await Promise.all([
                this.exchanges[buyExchange].marketBuy(symbol, quantity),
                this.exchanges[sellExchange].marketSell(symbol, quantity)
            ]);

            console.log(`üîÑ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–ª—è ${symbol}`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
            setTimeout(async () => {
                await this.closeArbitragePosition(symbol, buyExchange, sellExchange, quantity);
            }, this.strategies.get('arbitrage').parameters.maxPositionTime);

        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: ${error.message}`);
        }
    }

    async closeArbitragePosition(symbol, buyExchange, sellExchange, quantity) {
        try {
            await Promise.all([
                this.exchanges[buyExchange].marketSell(symbol, quantity),
                this.exchanges[sellExchange].marketBuy(symbol, quantity)
            ]);

            console.log(`‚úÖ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–∫—Ä–∏—Ç–æ –¥–ª—è ${symbol}`);
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É: ${error.message}`);
        }
    }

    async setRiskManagementOrders(exchange, symbol, side, quantity, entryPrice) {
        try {
            const stopLossPrice = side === 'LONG'
                ? entryPrice * 0.98  // 2% —Å—Ç–æ–ø-–ª–æ—Å
                : entryPrice * 1.02;

            const takeProfitPrice = side === 'LONG'
                ? entryPrice * 1.04  // 4% —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç
                : entryPrice * 0.96;

            // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—É
            await this.exchanges[exchange].setStopLoss(symbol, quantity, stopLossPrice, side);

            // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—É
            await this.exchanges[exchange].setTakeProfit(symbol, quantity, takeProfitPrice, side);

        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É: ${error.message}`);
        }
    }

    async closeAllPositions() {
        console.log('üîí –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...');

        for (const [key, position] of this.positions.entries()) {
            try {
                await this.exchanges[position.exchange].closePosition(
                    position.symbol,
                    position.side,
                    position.size
                );

                this.positions.delete(key);
                console.log(`‚úÖ –ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞: ${key}`);
            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ${key}: ${error.message}`);
            }
        }
    }

    checkStopLossAndTakeProfit(symbol, currentPrice) {
        // –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ñ–≤ —Ç–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç—ñ–≤
        for (const [key, position] of this.positions.entries()) {
            if (position.symbol !== symbol) continue;

            const pnlPercent = position.side === 'LONG'
                ? (currentPrice - position.entryPrice) / position.entryPrice * 100
                : (position.entryPrice - currentPrice) / position.entryPrice * 100;

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª–µ–π
            if (pnlPercent <= -2 || pnlPercent >= 4) {
                console.log(`‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ${key} –∑ PnL: ${pnlPercent.toFixed(2)}%`);
                this.closePosition(key);
            }
        }
    }

    async closePosition(positionKey) {
        const position = this.positions.get(positionKey);
        if (!position) return;

        try {
            await this.exchanges[position.exchange].closePosition(
                position.symbol,
                position.side,
                position.size
            );

            this.positions.delete(positionKey);
            this.emit('positionClosed', position);

        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: ${error.message}`);
        }
    }

    async calculateRSI(symbol, period = 14) {
        // –°–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è RSI
        // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        return Math.random() * 100; // –ó–∞–≥–ª—É—à–∫–∞
    }

    getActivePositions() {
        return Array.from(this.positions.values());
    }

    getPerformanceStats() {
        const positions = this.getActivePositions();
        const totalPnL = positions.reduce((sum, pos) => sum + (pos.unrealizedPnl || 0), 0);

        return {
            activePositions: positions.length,
            totalUnrealizedPnL: totalPnL,
            strategiesEnabled: Array.from(this.strategies.values()).filter(s => s.enabled).length
        };
    }
}

module.exports = TradingEngine;
