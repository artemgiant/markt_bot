// services/exchange.service.js
const { filterBalances } = require('../utils');

class ExchangeService {
    constructor(exchanges) {
        this.exchanges = exchanges;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤ –∑ –±—ñ—Ä–∂—ñ
     */
    async getBalances(exchange, ticker = null) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        const balances = await exchangeConnector.getSpotBalance(ticker);

        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ –±–∞–ª–∞–Ω—Å–∏
        if (!ticker) {
            return filterBalances(balances);
        }

        return balances;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –±–∞–ª–∞–Ω—Å—ñ–≤ –∑ —É—Å—ñ—Ö –±—ñ—Ä–∂
     */
    async getAllBalances(ticker = null) {
        const results = {};

        for (const [name, connector] of Object.entries(this.exchanges)) {
            try {
                const balances = await connector.getSpotBalance(ticker);
                results[name] = ticker ? balances : filterBalances(balances);
            } catch (error) {
                results[name] = { error: error.message };
            }
        }

        return results;
    }

    /**
     * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ
     */
    async testConnection(exchange) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        return exchangeConnector.testConnection();
    }

    /**
     * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
     */
    async enableExchange(exchange) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        await exchangeConnector.testConnection();
        console.log(`‚úÖ –ë—ñ—Ä–∂–∞ ${exchange} —É–≤—ñ–º–∫–Ω–µ–Ω–∞`);

        return { success: true, exchange };
    }

    /**
     * –í–∏–º–∫–Ω–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
     */
    disableExchange(exchange) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        if (exchangeConnector.disconnect) {
            exchangeConnector.disconnect();
        }

        console.log(`üî¥ –ë—ñ—Ä–∂–∞ ${exchange} –≤–∏–º–∫–Ω–µ–Ω–∞`);

        return { success: true, exchange };
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
     */
    async getTradingPairs(exchange) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        return exchangeConnector.getTradingPairs();
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–∫–µ—Ä—ñ–≤
     */
    async getTickers(exchange, market = null) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        return exchangeConnector.getTickers(market);
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    getConnectionStatus(exchange = null) {
        if (exchange) {
            const connector = this.exchanges[exchange];
            return connector ? connector.isConnected() : false;
        }

        // –°—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö –±—ñ—Ä–∂
        const status = {};
        for (const [name, connector] of Object.entries(this.exchanges)) {
            status[name] = connector.isConnected();
        }

        return status;
    }

    /**
     * –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ (—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤)
     */
    async emergencyStop(exchange) {
        const exchangeConnector = this.exchanges[exchange];

        if (!exchangeConnector) {
            throw new Error(`Exchange ${exchange} not found`);
        }

        console.log(`üö® –ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê –¥–ª—è ${exchange}`);

        // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤
        await exchangeConnector.cancelAllOrders();

        // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ—Ä–∂—ñ
        if (exchangeConnector.disconnect) {
            exchangeConnector.disconnect();
        }

        return { success: true, message: '–ï–∫—Å—Ç—Ä–µ–Ω—É –∑—É–ø–∏–Ω–∫—É –≤–∏–∫–æ–Ω–∞–Ω–æ' };
    }

    /**
     * –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –±—ñ—Ä–∂
     */
    async emergencyStopAll() {
        console.log('üö® –ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê –í–°–Ü–• –ë–Ü–†–ñ');

        const results = {};

        for (const [name, connector] of Object.entries(this.exchanges)) {
            try {
                await connector.cancelAllOrders();

                if (connector.disconnect) {
                    connector.disconnect();
                }

                results[name] = { success: true };
            } catch (error) {
                results[name] = { success: false, error: error.message };
            }
        }

        return results;
    }
}

module.exports = ExchangeService;


