#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const config = {
    outputFile: 'Architecture.md',

    // –ü–∞–ø–∫–∏ —Ç–∞ —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è
    ignore: [
        'node_modules',
        '.git',
        '.next',
        'dist',
        'build',
        '.cache',
        'coverage',
        '.vscode',
        '.idea',
        'logs',
        '*.log',
        '.DS_Store',
        'package-lock.json',
        'yarn.lock',
        'pnpm-lock.yaml',
        'Architecture.md' // –Ω–µ –≤–∫–ª—é—á–∞—î–º–æ —Å–∞–º —Ñ–∞–π–ª –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
    ],

    // –¢–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —ó—Ö –æ–ø–∏—Å
    fileTypes: {
        config: {
            extensions: ['.json', '.yaml', '.yml', '.toml', '.ini', '.env', '.config.js', '.config.ts'],
            icon: '‚öôÔ∏è',
            description: '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª'
        },
        code: {
            extensions: ['.js', '.ts', '.jsx', '.tsx'],
            icon: 'üìÑ',
            description: '–ö–æ–¥'
        },
        style: {
            extensions: ['.css', '.scss', '.sass', '.less', '.styl'],
            icon: 'üé®',
            description: '–°—Ç–∏–ª—ñ'
        },
        doc: {
            extensions: ['.md', '.txt', '.pdf', '.doc', '.docx'],
            icon: 'üìù',
            description: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è'
        },
        markup: {
            extensions: ['.html', '.xml', '.svg'],
            icon: 'üåê',
            description: '–†–æ–∑–º—ñ—Ç–∫–∞'
        },
        image: {
            extensions: ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.ico', '.svg'],
            icon: 'üñºÔ∏è',
            description: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è'
        },
        data: {
            extensions: ['.json', '.csv', '.xlsx', '.sql', '.db'],
            icon: 'üíæ',
            description: '–î–∞–Ω—ñ'
        },
        test: {
            extensions: ['.test.js', '.test.ts', '.spec.js', '.spec.ts'],
            icon: 'üß™',
            description: '–¢–µ—Å—Ç–∏'
        }
    },

    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
    specialFiles: {
        'package.json': { icon: 'üì¶', description: 'NPM –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ' },
        'README.md': { icon: 'üìñ', description: '–ì–æ–ª–æ–≤–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É' },
        'tsconfig.json': { icon: 'üîß', description: 'TypeScript –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è' },
        '.gitignore': { icon: 'üö´', description: 'Git ignore –ø—Ä–∞–≤–∏–ª–∞' },
        'Dockerfile': { icon: 'üê≥', description: 'Docker –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è' },
        'docker-compose.yml': { icon: 'üê≥', description: 'Docker Compose –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è' },
        '.env': { icon: 'üîê', description: '–ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è' },
        'webpack.config.js': { icon: 'üì¶', description: 'Webpack –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è' },
        'next.config.js': { icon: '‚ö°', description: 'Next.js –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è' },
        'vite.config.js': { icon: '‚ö°', description: 'Vite –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è' }
    },

    // –û–ø–∏—Å –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫
    folderDescriptions: {
        'src': '–í–∏—Ö—ñ–¥–Ω–∏–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç—É',
        'public': '–ü—É–±–ª—ñ—á–Ω—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏',
        'components': 'React/Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏',
        'pages': '–°—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–æ–¥–∞—Ç–∫—É',
        'api': 'API –º–∞—Ä—à—Ä—É—Ç–∏ —Ç–∞ –ª–æ–≥—ñ–∫–∞',
        'utils': '–î–æ–ø–æ–º—ñ–∂–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó',
        'hooks': 'React hooks',
        'styles': '–°—Ç–∏–ª—ñ –ø—Ä–æ–µ–∫—Ç—É',
        'assets': '–†–µ—Å—É—Ä—Å–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —à—Ä–∏—Ñ—Ç–∏)',
        'lib': '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —Ç–∞ –º–æ–¥—É–ª—ñ',
        'config': '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏',
        'tests': '–¢–µ—Å—Ç–∏',
        'docs': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è',
        'scripts': '–°–∫—Ä–∏–ø—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó',
        'types': 'TypeScript —Ç–∏–ø–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏',
        'models': '–ú–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö',
        'services': '–°–µ—Ä–≤—ñ—Å–∏ —Ç–∞ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞',
        'middlewares': 'Middleware —Ñ—É–Ω–∫—Ü—ñ—ó',
        'routes': '–ú–∞—Ä—à—Ä—É—Ç–∏',
        'controllers': '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏',
        'views': '–®–∞–±–ª–æ–Ω–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è'
    }
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
function shouldIgnore(name) {
    return config.ignore.some(pattern => {
        if (pattern.includes('*')) {
            const regex = new RegExp(pattern.replace(/\*/g, '.*'));
            return regex.test(name);
        }
        return name === pattern;
    });
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
function getFileInfo(filename) {
    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
    if (config.specialFiles[filename]) {
        return config.specialFiles[filename];
    }

    // –¢–µ—Å—Ç–∏
    if (filename.includes('.test.') || filename.includes('.spec.')) {
        return { icon: 'üß™', description: '–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª' };
    }

    // –ó–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
    const ext = path.extname(filename).toLowerCase();
    for (const [type, info] of Object.entries(config.fileTypes)) {
        if (info.extensions.some(e => filename.endsWith(e) || ext === e)) {
            return { icon: info.icon, description: info.description };
        }
    }

    return { icon: 'üìÑ', description: '–§–∞–π–ª' };
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function getStats(dirPath, stats = { files: 0, dirs: 0, size: 0, types: {} }) {
    try {
        const items = fs.readdirSync(dirPath);

        for (const item of items) {
            if (shouldIgnore(item)) continue;

            const fullPath = path.join(dirPath, item);
            const stat = fs.statSync(fullPath);

            if (stat.isDirectory()) {
                stats.dirs++;
                getStats(fullPath, stats);
            } else {
                stats.files++;
                stats.size += stat.size;

                const ext = path.extname(item) || '–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è';
                stats.types[ext] = (stats.types[ext] || 0) + 1;
            }
        }
    } catch (err) {
        // –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏
    }

    return stats;
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä
function formatSize(bytes) {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;

    while (size >= 1024 && unitIndex < units.length - 1) {
        size /= 1024;
        unitIndex++;
    }

    return `${size.toFixed(2)} ${units[unitIndex]}`;
}

// –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–µ—Ä–µ–≤–æ –¥–ª—è Markdown
function buildMarkdownTree(dirPath, prefix = '', isLast = true, maxDepth = Infinity, currentDepth = 0, projectRoot = dirPath) {
    if (currentDepth > maxDepth) return '';

    const name = path.basename(dirPath);
    const isDir = fs.statSync(dirPath).isDirectory();
    const fileInfo = isDir
        ? { icon: 'üìÅ', description: config.folderDescriptions[name] || '' }
        : getFileInfo(name);

    let output = '';

    if (currentDepth > 0) {
        const indent = '  '.repeat(currentDepth - 1);
        const symbol = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
        output += `${indent}${symbol}${fileInfo.icon} **${name}**`;

        if (fileInfo.description) {
            output += ` ‚Äî *${fileInfo.description}*`;
        }

        output += '\n';
    } else {
        output += `${fileInfo.icon} **${name}**\n`;
    }

    if (!isDir) return output;

    try {
        const items = fs.readdirSync(dirPath)
            .filter(item => !shouldIgnore(item))
            .sort((a, b) => {
                const aIsDir = fs.statSync(path.join(dirPath, a)).isDirectory();
                const bIsDir = fs.statSync(path.join(dirPath, b)).isDirectory();

                if (aIsDir && !bIsDir) return -1;
                if (!aIsDir && bIsDir) return 1;
                return a.localeCompare(b);
            });

        items.forEach((item, index) => {
            const fullPath = path.join(dirPath, item);
            const isLastItem = index === items.length - 1;

            output += buildMarkdownTree(fullPath, prefix, isLastItem, maxDepth, currentDepth + 1, projectRoot);
        });
    } catch (err) {
        // –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏
    }

    return output;
}

// –ó–Ω–∞–π—Ç–∏ package.json —Ç–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
function getProjectInfo(dirPath) {
    const packageJsonPath = path.join(dirPath, 'package.json');

    if (fs.existsSync(packageJsonPath)) {
        try {
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            return {
                name: packageJson.name || path.basename(dirPath),
                version: packageJson.version || 'N/A',
                description: packageJson.description || '',
                dependencies: Object.keys(packageJson.dependencies || {}),
                devDependencies: Object.keys(packageJson.devDependencies || {})
            };
        } catch (err) {
            // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É
        }
    }

    return {
        name: path.basename(dirPath),
        version: 'N/A',
        description: '',
        dependencies: [],
        devDependencies: []
    };
}

// –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ Architecture.md
function generateArchitectureMd(targetPath, maxDepth = Infinity) {
    const projectInfo = getProjectInfo(targetPath);
    const stats = getStats(targetPath);
    const tree = buildMarkdownTree(targetPath, '', true, maxDepth);
    const timestamp = new Date().toLocaleString('uk-UA');

    let markdown = `# üèóÔ∏è –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ü—Ä–æ–µ–∫—Ç—É

> **–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ:** ${timestamp}

---

## üìä –ó–∞–≥–∞–ª—å–Ω–∞ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–Ω—è |
|----------|----------|
| **–ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É** | ${projectInfo.name} |
| **–í–µ—Ä—Å—ñ—è** | ${projectInfo.version} |
| **–í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤** | ${stats.files} |
| **–í—Å—å–æ–≥–æ –ø–∞–ø–æ–∫** | ${stats.dirs} |
| **–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä** | ${formatSize(stats.size)} |
`;

    if (projectInfo.description) {
        markdown += `| **–û–ø–∏—Å** | ${projectInfo.description} |\n`;
    }

    markdown += `
---

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ü—Ä–æ–µ–∫—Ç—É

\`\`\`
${tree.trim()}
\`\`\`

---

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§–∞–π–ª—ñ–≤

### –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–∏–ø–∞–º–∏

`;

    // –¢–æ–ø —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤
    const topTypes = Object.entries(stats.types)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);

    markdown += '| –¢–∏–ø —Ñ–∞–π–ª—É | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –í—ñ–¥—Å–æ—Ç–æ–∫ |\n';
    markdown += '|-----------|-----------|----------|\n';

    topTypes.forEach(([ext, count]) => {
        const percentage = ((count / stats.files) * 100).toFixed(1);
        markdown += `| \`${ext}\` | ${count} | ${percentage}% |\n`;
    });

    // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if (projectInfo.dependencies.length > 0) {
        markdown += `\n---\n\n## üì¶ –û—Å–Ω–æ–≤–Ω—ñ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ\n\n`;
        markdown += `–í—Å—å–æ–≥–æ: **${projectInfo.dependencies.length}**\n\n`;

        const topDeps = projectInfo.dependencies.slice(0, 15);
        markdown += '| –ü–∞–∫–µ—Ç |\n|-------|\n';
        topDeps.forEach(dep => {
            markdown += `| \`${dep}\` |\n`;
        });

        if (projectInfo.dependencies.length > 15) {
            markdown += `\n*...—ñ —â–µ ${projectInfo.dependencies.length - 15} –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π*\n`;
        }
    }

    // Dev –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if (projectInfo.devDependencies.length > 0) {
        markdown += `\n---\n\n## üõ†Ô∏è Dev –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ\n\n`;
        markdown += `–í—Å—å–æ–≥–æ: **${projectInfo.devDependencies.length}**\n\n`;

        const topDevDeps = projectInfo.devDependencies.slice(0, 15);
        markdown += '| –ü–∞–∫–µ—Ç |\n|-------|\n';
        topDevDeps.forEach(dep => {
            markdown += `| \`${dep}\` |\n`;
        });

        if (projectInfo.devDependencies.length > 15) {
            markdown += `\n*...—ñ —â–µ ${projectInfo.devDependencies.length - 15} dev –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π*\n`;
        }
    }

    markdown += `\n---\n\n## üìù –õ–µ–≥–µ–Ω–¥–∞\n\n`;
    markdown += '| –Ü–∫–æ–Ω–∫–∞ | –¢–∏–ø | –û–ø–∏—Å |\n';
    markdown += '|--------|-----|------|\n';
    markdown += '| üìÅ | –ü–∞–ø–∫–∞ | –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ —Ñ–∞–π–ª–∞–º–∏ |\n';
    markdown += '| üìÑ | –ö–æ–¥ | JavaScript/TypeScript —Ñ–∞–π–ª–∏ |\n';
    markdown += '| ‚öôÔ∏è | –ö–æ–Ω—Ñ—ñ–≥ | –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏ |\n';
    markdown += '| üé® | –°—Ç–∏–ª—ñ | CSS/SCSS —Ñ–∞–π–ª–∏ |\n';
    markdown += '| üìù | –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è | Markdown —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ |\n';
    markdown += '| üß™ | –¢–µ—Å—Ç–∏ | –¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ |\n';
    markdown += '| üñºÔ∏è | –ú–µ–¥—ñ–∞ | –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ |\n';
    markdown += '| üì¶ | –ü–∞–∫–µ—Ç | package.json —Ç–∞ –ø–æ–¥—ñ–±–Ω—ñ |\n';

    markdown += `\n---\n\n`;
    markdown += `*–¶–µ–π —Ñ–∞–π–ª –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å:*\n\n`;
    markdown += '```bash\n';
    markdown += 'node generate-architecture.js\n';
    markdown += '```\n';

    return markdown;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
    const args = process.argv.slice(2);
    const targetPath = args[0] || process.cwd();
    const maxDepth = args[1] ? parseInt(args[1]) : Infinity;
    const outputPath = path.join(targetPath, config.outputFile);

    console.log('üèóÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Architecture.md...\n');
    console.log(`üìÇ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è: ${targetPath}`);

    if (maxDepth !== Infinity) {
        console.log(`üî¢ –ì–ª–∏–±–∏–Ω–∞: ${maxDepth}`);
    }

    try {
        const markdown = generateArchitectureMd(targetPath, maxDepth);
        fs.writeFileSync(outputPath, markdown, 'utf8');

        console.log(`\n‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${outputPath}`);
        console.log(`üìä –†–æ–∑–º—ñ—Ä: ${formatSize(Buffer.byteLength(markdown, 'utf8'))}`);

        const stats = getStats(targetPath);
        console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   üìÅ –ü–∞–ø–æ–∫: ${stats.dirs}`);
        console.log(`   üìÑ –§–∞–π–ª—ñ–≤: ${stats.files}`);
        console.log(`   üíæ –†–æ–∑–º—ñ—Ä: ${formatSize(stats.size)}`);

    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', err.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main();
}

module.exports = { generateArchitectureMd, getStats };